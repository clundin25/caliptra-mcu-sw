// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 39dd3917923c26515ca02c547807706f797428df
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait DoeMboxPeripheral {
    fn set_dma_ram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<caliptra_emu_bus::Ram>>) {}
    fn set_dma_rom_sram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<caliptra_emu_bus::Ram>>) {}
    fn register_event_channels(
        &mut self,
        _events_to_caliptra: std::sync::mpsc::Sender<caliptra_emu_bus::Event>,
        _events_from_caliptra: std::sync::mpsc::Receiver<caliptra_emu_bus::Event>,
        _events_to_mcu: std::sync::mpsc::Sender<caliptra_emu_bus::Event>,
        _events_from_mcu: std::sync::mpsc::Receiver<caliptra_emu_bus::Event>,
    ) {
    }
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_doe_mbox_lock(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::doe_mbox::bits::DoeMboxLock::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_doe_mbox_dlen(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_doe_mbox_dlen(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_doe_mbox_status(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::doe_mbox::bits::DoeMboxStatus::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_doe_mbox_status(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::doe_mbox::bits::DoeMboxStatus::Register,
        >,
    ) {
    }
    fn read_doe_mbox_data_ready(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::doe_mbox::bits::DoeMboxDataReady::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_doe_mbox_data_ready(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::doe_mbox::bits::DoeMboxDataReady::Register,
        >,
    ) {
    }
    fn read_doe_mbox_sram(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_doe_mbox_sram(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
}
pub struct DoeMboxBus {
    pub periph: Box<dyn DoeMboxPeripheral>,
}
impl caliptra_emu_bus::Bus for DoeMboxBus {
    fn read(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
    ) -> Result<caliptra_emu_types::RvData, caliptra_emu_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(caliptra_emu_bus::BusError::LoadAddrMisaligned);
        }
        match addr {
            0..4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_doe_mbox_lock().reg.get(),
            )),
            4..8 => Ok(self.periph.read_doe_mbox_dlen()),
            8..0xc => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_doe_mbox_status().reg.get(),
            )),
            0xc..0x10 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_doe_mbox_data_ready().reg.get(),
            )),
            0x1000..0x10_1000 => Ok(self.periph.read_doe_mbox_sram((addr as usize - 0x1000) / 4)),
            _ => Err(caliptra_emu_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
        val: caliptra_emu_types::RvData,
    ) -> Result<(), caliptra_emu_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(caliptra_emu_bus::BusError::StoreAddrMisaligned);
        }
        match addr {
            4..8 => {
                self.periph.write_doe_mbox_dlen(val);
                Ok(())
            }
            8..0xc => {
                self.periph
                    .write_doe_mbox_status(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xc..0x10 => {
                self.periph
                    .write_doe_mbox_data_ready(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x1000..0x10_1000 => {
                self.periph
                    .write_doe_mbox_sram(val, (addr as usize - 0x1000) / 4);
                Ok(())
            }
            _ => Err(caliptra_emu_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
