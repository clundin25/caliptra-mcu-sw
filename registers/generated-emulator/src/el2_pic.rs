// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 4f006115433f926f4e599bc8718a39168f70ce5f
//
//
// Warning: caliptra-ss was dirty: M third_party/caliptra-rtl
// M third_party/i3c-core
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait El2PicPeripheral {
    fn set_dma_ram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<emulator_bus::Ram>>) {}
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_meipl(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::el2_pic_ctrl::bits::Meipl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_meipl(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::el2_pic_ctrl::bits::Meipl::Register,
        >,
    ) {
    }
    fn read_meip(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::el2_pic_ctrl::bits::Meip::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_meie(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::el2_pic_ctrl::bits::Meie::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_meie(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::el2_pic_ctrl::bits::Meie::Register,
        >,
    ) {
    }
    fn read_mpiccfg(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::el2_pic_ctrl::bits::Mpiccfg::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_mpiccfg(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::el2_pic_ctrl::bits::Mpiccfg::Register,
        >,
    ) {
    }
    fn read_meigwctrl(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::el2_pic_ctrl::bits::Meigwctrl::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_meigwctrl(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::el2_pic_ctrl::bits::Meigwctrl::Register,
        >,
    ) {
    }
    fn read_meigwclr(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_meigwclr(&mut self, _val: caliptra_emu_types::RvData) {}
}
pub struct El2PicBus {
    pub periph: Box<dyn El2PicPeripheral>,
}
impl emulator_bus::Bus for El2PicBus {
    fn read(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
    ) -> Result<caliptra_emu_types::RvData, emulator_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(emulator_bus::BusError::LoadAddrMisaligned);
        }
        match addr {
            0..0x400 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_meipl().reg.get(),
            )),
            0x1000..0x1400 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_meip().reg.get(),
            )),
            0x2000..0x2400 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_meie().reg.get(),
            )),
            0x3000..0x3004 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_mpiccfg().reg.get(),
            )),
            0x4000..0x4400 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_meigwctrl().reg.get(),
            )),
            0x5000..0x5400 => Ok(self.periph.read_meigwclr()),
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
        val: caliptra_emu_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(emulator_bus::BusError::StoreAddrMisaligned);
        }
        match addr {
            0..0x400 => {
                self.periph
                    .write_meipl(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x2000..0x2400 => {
                self.periph
                    .write_meie(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x3000..0x3004 => {
                self.periph
                    .write_mpiccfg(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x4000..0x4400 => {
                self.periph
                    .write_meigwctrl(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x5000..0x5400 => {
                self.periph.write_meigwclr(val);
                Ok(())
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
