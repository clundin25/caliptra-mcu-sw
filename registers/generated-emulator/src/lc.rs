// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 39dd3917923c26515ca02c547807706f797428df
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait LcPeripheral {
    fn set_dma_ram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<caliptra_emu_bus::Ram>>) {}
    fn set_dma_rom_sram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<caliptra_emu_bus::Ram>>) {}
    fn register_event_channels(
        &mut self,
        _events_to_caliptra: Option<std::sync::mpsc::Sender<caliptra_emu_bus::Event>>,
        _events_from_caliptra: Option<std::sync::mpsc::Receiver<caliptra_emu_bus::Event>>,
        _events_to_mcu: Option<std::sync::mpsc::Sender<caliptra_emu_bus::Event>>,
        _events_from_mcu: Option<std::sync::mpsc::Receiver<caliptra_emu_bus::Event>>,
    ) {
    }
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn write_alert_test(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::lc_ctrl::bits::AlertTest::Register,
        >,
    ) {
    }
    fn read_status(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::Status::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_claim_transition_if_regwen(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::ClaimTransitionIfRegwen::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_claim_transition_if_regwen(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::lc_ctrl::bits::ClaimTransitionIfRegwen::Register,
        >,
    ) {
    }
    fn read_claim_transition_if(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::ClaimTransitionIf::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_claim_transition_if(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::lc_ctrl::bits::ClaimTransitionIf::Register,
        >,
    ) {
    }
    fn read_transition_regwen(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::TransitionRegwen::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_transition_cmd(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::TransitionCmd::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_transition_cmd(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::lc_ctrl::bits::TransitionCmd::Register,
        >,
    ) {
    }
    fn read_transition_ctrl(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::TransitionCtrl::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_transition_ctrl(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::lc_ctrl::bits::TransitionCtrl::Register,
        >,
    ) {
    }
    fn read_transition_token_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_transition_token_0(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_transition_token_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_transition_token_1(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_transition_token_2(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_transition_token_2(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_transition_token_3(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_transition_token_3(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_transition_target(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::TransitionTarget::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_transition_target(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::lc_ctrl::bits::TransitionTarget::Register,
        >,
    ) {
    }
    fn read_otp_vendor_test_ctrl(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_otp_vendor_test_ctrl(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_otp_vendor_test_status(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_lc_state(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::LcState::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_lc_transition_cnt(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::LcTransitionCnt::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_lc_id_state(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_hw_revision0(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::HwRevision0::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_hw_revision1(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::lc_ctrl::bits::HwRevision1::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_device_id_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_device_id_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_device_id_2(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_device_id_3(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_device_id_4(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_device_id_5(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_device_id_6(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_device_id_7(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_manuf_state_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_manuf_state_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_manuf_state_2(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_manuf_state_3(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_manuf_state_4(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_manuf_state_5(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_manuf_state_6(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_manuf_state_7(&mut self) -> caliptra_emu_types::RvData {
        0
    }
}
pub struct LcBus {
    pub periph: Box<dyn LcPeripheral>,
}
impl caliptra_emu_bus::Bus for LcBus {
    fn read(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
    ) -> Result<caliptra_emu_types::RvData, caliptra_emu_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(caliptra_emu_bus::BusError::LoadAddrMisaligned);
        }
        match addr {
            4..8 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_status().reg.get(),
            )),
            8..0xc => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_claim_transition_if_regwen().reg.get(),
            )),
            0xc..0x10 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_claim_transition_if().reg.get(),
            )),
            0x10..0x14 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_transition_regwen().reg.get(),
            )),
            0x14..0x18 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_transition_cmd().reg.get(),
            )),
            0x18..0x1c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_transition_ctrl().reg.get(),
            )),
            0x1c..0x20 => Ok(self.periph.read_transition_token_0()),
            0x20..0x24 => Ok(self.periph.read_transition_token_1()),
            0x24..0x28 => Ok(self.periph.read_transition_token_2()),
            0x28..0x2c => Ok(self.periph.read_transition_token_3()),
            0x2c..0x30 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_transition_target().reg.get(),
            )),
            0x30..0x34 => Ok(self.periph.read_otp_vendor_test_ctrl()),
            0x34..0x38 => Ok(self.periph.read_otp_vendor_test_status()),
            0x38..0x3c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_lc_state().reg.get(),
            )),
            0x3c..0x40 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_lc_transition_cnt().reg.get(),
            )),
            0x40..0x44 => Ok(self.periph.read_lc_id_state()),
            0x44..0x48 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_hw_revision0().reg.get(),
            )),
            0x48..0x4c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_hw_revision1().reg.get(),
            )),
            0x4c..0x50 => Ok(self.periph.read_device_id_0()),
            0x50..0x54 => Ok(self.periph.read_device_id_1()),
            0x54..0x58 => Ok(self.periph.read_device_id_2()),
            0x58..0x5c => Ok(self.periph.read_device_id_3()),
            0x5c..0x60 => Ok(self.periph.read_device_id_4()),
            0x60..0x64 => Ok(self.periph.read_device_id_5()),
            0x64..0x68 => Ok(self.periph.read_device_id_6()),
            0x68..0x6c => Ok(self.periph.read_device_id_7()),
            0x6c..0x70 => Ok(self.periph.read_manuf_state_0()),
            0x70..0x74 => Ok(self.periph.read_manuf_state_1()),
            0x74..0x78 => Ok(self.periph.read_manuf_state_2()),
            0x78..0x7c => Ok(self.periph.read_manuf_state_3()),
            0x7c..0x80 => Ok(self.periph.read_manuf_state_4()),
            0x80..0x84 => Ok(self.periph.read_manuf_state_5()),
            0x84..0x88 => Ok(self.periph.read_manuf_state_6()),
            0x88..0x8c => Ok(self.periph.read_manuf_state_7()),
            _ => Err(caliptra_emu_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
        val: caliptra_emu_types::RvData,
    ) -> Result<(), caliptra_emu_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(caliptra_emu_bus::BusError::StoreAddrMisaligned);
        }
        match addr {
            0..4 => {
                self.periph
                    .write_alert_test(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            8..0xc => {
                self.periph.write_claim_transition_if_regwen(
                    caliptra_emu_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0xc..0x10 => {
                self.periph
                    .write_claim_transition_if(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x14..0x18 => {
                self.periph
                    .write_transition_cmd(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x18..0x1c => {
                self.periph
                    .write_transition_ctrl(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x1c..0x20 => {
                self.periph.write_transition_token_0(val);
                Ok(())
            }
            0x20..0x24 => {
                self.periph.write_transition_token_1(val);
                Ok(())
            }
            0x24..0x28 => {
                self.periph.write_transition_token_2(val);
                Ok(())
            }
            0x28..0x2c => {
                self.periph.write_transition_token_3(val);
                Ok(())
            }
            0x2c..0x30 => {
                self.periph
                    .write_transition_target(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x30..0x34 => {
                self.periph.write_otp_vendor_test_ctrl(val);
                Ok(())
            }
            _ => Err(caliptra_emu_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
