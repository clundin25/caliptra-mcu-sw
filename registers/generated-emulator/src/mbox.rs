// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 4f006115433f926f4e599bc8718a39168f70ce5f
//
//
// Warning: caliptra-ss was dirty: M third_party/caliptra-rtl
// M third_party/i3c-core
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait MboxPeripheral {
    fn set_dma_ram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<emulator_bus::Ram>>) {}
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_mbox_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mbox::bits::MboxLock::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_mbox_user(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_mbox_cmd(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mbox_cmd(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mbox_dlen(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mbox_dlen(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mbox_datain(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mbox_datain(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mbox_dataout(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mbox_dataout(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mbox_execute(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mbox::bits::MboxExecute::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_mbox_execute(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mbox::bits::MboxExecute::Register,
        >,
    ) {
    }
    fn read_mbox_status(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mbox::bits::MboxStatus::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_mbox_status(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mbox::bits::MboxStatus::Register,
        >,
    ) {
    }
    fn read_mbox_unlock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mbox::bits::MboxUnlock::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_mbox_unlock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mbox::bits::MboxUnlock::Register,
        >,
    ) {
    }
    fn read_tap_mode(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mbox::bits::TapMode::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_tap_mode(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mbox::bits::TapMode::Register,
        >,
    ) {
    }
}
pub struct MboxBus {
    pub periph: Box<dyn MboxPeripheral>,
}
impl emulator_bus::Bus for MboxBus {
    fn read(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
    ) -> Result<caliptra_emu_types::RvData, emulator_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(emulator_bus::BusError::LoadAddrMisaligned);
        }
        match addr {
            0..4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_mbox_lock().reg.get(),
            )),
            4..8 => Ok(self.periph.read_mbox_user()),
            8..0xc => Ok(self.periph.read_mbox_cmd()),
            0xc..0x10 => Ok(self.periph.read_mbox_dlen()),
            0x10..0x14 => Ok(self.periph.read_mbox_datain()),
            0x14..0x18 => Ok(self.periph.read_mbox_dataout()),
            0x18..0x1c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_mbox_execute().reg.get(),
            )),
            0x1c..0x20 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_mbox_status().reg.get(),
            )),
            0x20..0x24 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_mbox_unlock().reg.get(),
            )),
            0x24..0x28 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_tap_mode().reg.get(),
            )),
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
        val: caliptra_emu_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(emulator_bus::BusError::StoreAddrMisaligned);
        }
        match addr {
            8..0xc => {
                self.periph.write_mbox_cmd(val);
                Ok(())
            }
            0xc..0x10 => {
                self.periph.write_mbox_dlen(val);
                Ok(())
            }
            0x10..0x14 => {
                self.periph.write_mbox_datain(val);
                Ok(())
            }
            0x14..0x18 => {
                self.periph.write_mbox_dataout(val);
                Ok(())
            }
            0x18..0x1c => {
                self.periph
                    .write_mbox_execute(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x1c..0x20 => {
                self.periph
                    .write_mbox_status(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x20..0x24 => {
                self.periph
                    .write_mbox_unlock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x24..0x28 => {
                self.periph
                    .write_tap_mode(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
