// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 37ccfe938398b47a86a08f0f411d5b863347ba39
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait MciPeripheral {
    fn set_dma_ram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<emulator_bus::Ram>>) {}
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_hw_capabilities(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_hw_capabilities(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_fw_capabilities(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fw_capabilities(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cap_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::CapLock::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cap_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::CapLock::Register,
        >,
    ) {
    }
    fn read_hw_rev_id(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::HwRevId::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_fw_rev_id(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fw_rev_id(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_hw_config0(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::HwConfig0::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_hw_config1(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::HwConfig1::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_fw_flow_status(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fw_flow_status(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_hw_flow_status(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::HwFlowStatus::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_reset_reason(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::ResetReason::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_reset_status(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::ResetStatus::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_security_state(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::SecurityState::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_hw_error_fatal(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::HwErrorFatal::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_hw_error_fatal(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::HwErrorFatal::Register,
        >,
    ) {
    }
    fn read_agg_error_fatal(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::AggErrorFatal::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_agg_error_fatal(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::AggErrorFatal::Register,
        >,
    ) {
    }
    fn read_hw_error_non_fatal(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::HwErrorNonFatal::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_hw_error_non_fatal(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::HwErrorNonFatal::Register,
        >,
    ) {
    }
    fn read_agg_error_non_fatal(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::AggErrorNonFatal::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_agg_error_non_fatal(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::AggErrorNonFatal::Register,
        >,
    ) {
    }
    fn read_fw_error_fatal(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fw_error_fatal(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_fw_error_non_fatal(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fw_error_non_fatal(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_hw_error_enc(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_hw_error_enc(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_fw_error_enc(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fw_error_enc(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_fw_extended_error_info(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fw_extended_error_info(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_internal_hw_error_fatal_mask(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::InternalHwErrorFatalMask::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_internal_hw_error_fatal_mask(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::InternalHwErrorFatalMask::Register,
        >,
    ) {
    }
    fn read_internal_hw_error_non_fatal_mask(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::InternalHwErrorNonFatalMask::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_internal_hw_error_non_fatal_mask(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::InternalHwErrorNonFatalMask::Register,
        >,
    ) {
    }
    fn read_internal_agg_error_fatal_mask(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::InternalAggErrorFatalMask::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_internal_agg_error_fatal_mask(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::InternalAggErrorFatalMask::Register,
        >,
    ) {
    }
    fn read_internal_agg_error_non_fatal_mask(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::InternalAggErrorNonFatalMask::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_internal_agg_error_non_fatal_mask(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::InternalAggErrorNonFatalMask::Register,
        >,
    ) {
    }
    fn read_internal_fw_error_fatal_mask(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_internal_fw_error_fatal_mask(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_internal_fw_error_non_fatal_mask(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_internal_fw_error_non_fatal_mask(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_wdt_timer1_en(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::WdtTimer1En::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_wdt_timer1_en(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::WdtTimer1En::Register,
        >,
    ) {
    }
    fn read_wdt_timer1_ctrl(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::WdtTimer1Ctrl::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_wdt_timer1_ctrl(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::WdtTimer1Ctrl::Register,
        >,
    ) {
    }
    fn read_wdt_timer1_timeout_period(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_wdt_timer1_timeout_period(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_wdt_timer2_en(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::WdtTimer2En::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_wdt_timer2_en(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::WdtTimer2En::Register,
        >,
    ) {
    }
    fn read_wdt_timer2_ctrl(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::WdtTimer2Ctrl::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_wdt_timer2_ctrl(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::WdtTimer2Ctrl::Register,
        >,
    ) {
    }
    fn read_wdt_timer2_timeout_period(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_wdt_timer2_timeout_period(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_wdt_status(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::WdtStatus::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_wdt_cfg(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_wdt_cfg(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mcu_timer_config(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mcu_timer_config(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mcu_rv_mtime_l(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mcu_rv_mtime_l(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mcu_rv_mtime_h(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mcu_rv_mtime_h(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mcu_rv_mtimecmp_l(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mcu_rv_mtimecmp_l(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mcu_rv_mtimecmp_h(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mcu_rv_mtimecmp_h(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_reset_request(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::ResetRequest::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_reset_request(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::ResetRequest::Register,
        >,
    ) {
    }
    fn read_bootfsm_go(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Go::Register> {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_bootfsm_go(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Go::Register>,
    ) {
    }
    fn read_cptra_boot_go(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Go::Register> {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_boot_go(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Go::Register>,
    ) {
    }
    fn read_fw_sram_exec_region_size(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::FwSramExecRegionSize::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_fw_sram_exec_region_size(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::FwSramExecRegionSize::Register,
        >,
    ) {
    }
    fn read_mcu_nmi_vector(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mcu_nmi_vector(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mcu_reset_vector(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mcu_reset_vector(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mbox0_valid_axi_user(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mbox0_valid_axi_user(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mbox0_axi_user_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::MboxxAxiUserLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_mbox0_axi_user_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::MboxxAxiUserLock::Register,
        >,
    ) {
    }
    fn read_mbox1_valid_axi_user(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_mbox1_valid_axi_user(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_mbox1_axi_user_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::MboxxAxiUserLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_mbox1_axi_user_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::MboxxAxiUserLock::Register,
        >,
    ) {
    }
    fn read_soc_dft_en(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_soc_dft_en(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_soc_hw_debug_en(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_soc_hw_debug_en(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_soc_prod_debug_state(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_soc_prod_debug_state(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_fc_fips_zerozation(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fc_fips_zerozation(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_generic_input_wires(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_generic_output_wires(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_generic_output_wires(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_debug_in(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Debug::Register> {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_debug_in(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Debug::Register>,
    ) {
    }
    fn read_debug_out(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Debug::Register> {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_debug_out(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Debug::Register>,
    ) {
    }
    fn read_ss_debug_intent(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::soc::bits::SsDebugIntent::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_ss_config_done_sticky(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::SsConfigDone::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_ss_config_done_sticky(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::SsConfigDone::Register,
        >,
    ) {
    }
    fn read_ss_config_done(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::SsConfigDone::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_ss_config_done(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::SsConfigDone::Register,
        >,
    ) {
    }
    fn read_prod_debug_unlock_pk_hash_reg(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_prod_debug_unlock_pk_hash_reg(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_intr_block_rf_global_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::soc::bits::GlobalIntrEnT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_global_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::GlobalIntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error0_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Error0IntrEnT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error0_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Error0IntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error1_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Error1IntrEnT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error1_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Error1IntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif0_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Notif0IntrEnT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif0_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Notif0IntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif1_intr_en_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Notif1IntrEnT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif1_intr_en_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Notif1IntrEnT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_global_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::soc::bits::GlobalIntrT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_global_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::soc::bits::GlobalIntrT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error0_internal_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Error0IntrT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error0_internal_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Error0IntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error1_internal_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Error1IntrT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error1_internal_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Error1IntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif0_internal_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Notif0IntrT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif0_internal_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Notif0IntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif1_internal_intr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::mci::bits::Notif1IntrT::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif1_internal_intr_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Notif1IntrT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error0_intr_trig_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::Error0IntrTrigT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error0_intr_trig_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Error0IntrTrigT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error1_intr_trig_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::Error1IntrTrigT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_error1_intr_trig_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Error1IntrTrigT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif0_intr_trig_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::Notif0IntrTrigT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif0_intr_trig_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Notif0IntrTrigT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_notif1_intr_trig_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::mci::bits::Notif1IntrTrigT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_intr_block_rf_notif1_intr_trig_r(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::mci::bits::Notif1IntrTrigT::Register,
        >,
    ) {
    }
    fn read_intr_block_rf_error_internal_intr_count_r(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_internal_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_mbox0_inv_dev_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_mbox0_inv_dev_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_mbox1_inv_dev_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_mbox1_inv_dev_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_mbox0_cmd_fail_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_mbox0_cmd_fail_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_mbox1_cmd_fail_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_mbox1_cmd_fail_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_mbox0_ecc_unc_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_mbox0_ecc_unc_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_mbox1_ecc_unc_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_mbox1_ecc_unc_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_mcu_sram_dmi_axi_collision_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_mcu_sram_dmi_axi_collision_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_wdt_timer1_timeout_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_wdt_timer1_timeout_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_wdt_timer2_timeout_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_wdt_timer2_timeout_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal0_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal0_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal1_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal1_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal2_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal2_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal3_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal3_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal4_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal4_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal5_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal5_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal6_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal6_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal7_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal7_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal8_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal8_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal9_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal9_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal10_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal10_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal11_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal11_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal12_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal12_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal13_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal13_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal14_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal14_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal15_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal15_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal16_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal16_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal17_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal17_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal18_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal18_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal19_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal19_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal20_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal20_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal21_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal21_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal22_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal22_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal23_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal23_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal24_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal24_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal25_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal25_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal26_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal26_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal27_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal27_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal28_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal28_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal29_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal29_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal30_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal30_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_agg_error_fatal31_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_error_agg_error_fatal31_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_mcu_sram_ecc_cor_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_mcu_sram_ecc_cor_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_cptra_mcu_reset_req_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_cptra_mcu_reset_req_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_gen_in_toggle_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_gen_in_toggle_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal0_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal0_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal1_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal1_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal2_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal2_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal3_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal3_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal4_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal4_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal5_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal5_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal6_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal6_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal7_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal7_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal8_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal8_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal9_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal9_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal10_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal10_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal11_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal11_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal12_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal12_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal13_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal13_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal14_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal14_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal15_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal15_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal16_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal16_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal17_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal17_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal18_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal18_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal19_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal19_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal20_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal20_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal21_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal21_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal22_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal22_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal23_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal23_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal24_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal24_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal25_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal25_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal26_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal26_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal27_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal27_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal28_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal28_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal29_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal29_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal30_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal30_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal31_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_agg_error_non_fatal31_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_mbox0_cmd_avail_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_mbox0_cmd_avail_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_mbox1_cmd_avail_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_mbox1_cmd_avail_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_cptra_mbox_cmd_avail_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_cptra_mbox_cmd_avail_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_mbox0_ecc_cor_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_mbox0_ecc_cor_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_mbox1_ecc_cor_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_mbox1_ecc_cor_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_debug_locked_intr_count_r(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_debug_locked_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_scan_mode_intr_count_r(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_scan_mode_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_mbox0_soc_req_lock_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_mbox0_soc_req_lock_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_notif_mbox1_soc_req_lock_intr_count_r(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_intr_block_rf_notif_mbox1_soc_req_lock_intr_count_r(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_intr_block_rf_error_internal_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_mbox0_inv_dev_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_mbox1_inv_dev_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_mbox0_cmd_fail_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_mbox1_cmd_fail_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_mbox0_ecc_unc_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_mbox1_ecc_unc_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_wdt_timer1_timeout_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_wdt_timer2_timeout_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_mcu_sram_dmi_axi_collision_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal0_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal1_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal2_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal3_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal4_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal5_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal6_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal7_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal8_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal9_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal10_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal11_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal12_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal13_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal14_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal15_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal16_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal17_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal18_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal19_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal20_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal21_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal22_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal23_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal24_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal25_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal26_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal27_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal28_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal29_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal30_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_error_agg_error_fatal31_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_mcu_sram_ecc_cor_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_cptra_mcu_reset_req_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_gen_in_toggle_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal0_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal1_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal2_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal3_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal4_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal5_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal6_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal7_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal8_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal9_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal10_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal11_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal12_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal13_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal14_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal15_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal16_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal17_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal18_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal19_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal20_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal21_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal22_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal23_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal24_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal25_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal26_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal27_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal28_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal29_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal30_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_agg_error_non_fatal31_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_mbox0_cmd_avail_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_mbox1_cmd_avail_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_cptra_mbox_cmd_avail_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_mbox0_ecc_cor_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_mbox1_ecc_cor_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_debug_locked_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_scan_mode_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_mbox0_soc_req_lock_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_intr_block_rf_notif_mbox1_soc_req_lock_intr_count_incr_r(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::IntrCountIncrT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
}
pub struct MciBus {
    pub periph: Box<dyn MciPeripheral>,
}
impl emulator_bus::Bus for MciBus {
    fn read(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
    ) -> Result<caliptra_emu_types::RvData, emulator_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(emulator_bus::BusError::LoadAddrMisaligned);
        }
        match addr {
            0..4 => Ok(self.periph.read_hw_capabilities()),
            4..8 => Ok(self.periph.read_fw_capabilities()),
            8..0xc => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cap_lock().reg.get(),
            )),
            0xc..0x10 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_hw_rev_id().reg.get(),
            )),
            0x10..0x18 => Ok(self.periph.read_fw_rev_id()),
            0x18..0x1c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_hw_config0().reg.get(),
            )),
            0x1c..0x20 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_hw_config1().reg.get(),
            )),
            0x20..0x24 => Ok(self.periph.read_fw_flow_status()),
            0x24..0x28 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_hw_flow_status().reg.get(),
            )),
            0x28..0x2c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_reset_reason().reg.get(),
            )),
            0x2c..0x30 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_reset_status().reg.get(),
            )),
            0x30..0x34 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_security_state().reg.get(),
            )),
            0x40..0x44 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_hw_error_fatal().reg.get(),
            )),
            0x44..0x48 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_agg_error_fatal().reg.get(),
            )),
            0x48..0x4c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_hw_error_non_fatal().reg.get(),
            )),
            0x4c..0x50 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_agg_error_non_fatal().reg.get(),
            )),
            0x50..0x54 => Ok(self.periph.read_fw_error_fatal()),
            0x54..0x58 => Ok(self.periph.read_fw_error_non_fatal()),
            0x58..0x5c => Ok(self.periph.read_hw_error_enc()),
            0x5c..0x60 => Ok(self.periph.read_fw_error_enc()),
            0x60..0x80 => Ok(self.periph.read_fw_extended_error_info()),
            0x80..0x84 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_internal_hw_error_fatal_mask().reg.get(),
            )),
            0x84..0x88 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_internal_hw_error_non_fatal_mask()
                    .reg
                    .get(),
            )),
            0x88..0x8c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_internal_agg_error_fatal_mask().reg.get(),
            )),
            0x8c..0x90 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_internal_agg_error_non_fatal_mask()
                    .reg
                    .get(),
            )),
            0x90..0x94 => Ok(self.periph.read_internal_fw_error_fatal_mask()),
            0x94..0x98 => Ok(self.periph.read_internal_fw_error_non_fatal_mask()),
            0xa0..0xa4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_wdt_timer1_en().reg.get(),
            )),
            0xa4..0xa8 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_wdt_timer1_ctrl().reg.get(),
            )),
            0xa8..0xb0 => Ok(self.periph.read_wdt_timer1_timeout_period()),
            0xb0..0xb4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_wdt_timer2_en().reg.get(),
            )),
            0xb4..0xb8 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_wdt_timer2_ctrl().reg.get(),
            )),
            0xb8..0xc0 => Ok(self.periph.read_wdt_timer2_timeout_period()),
            0xc0..0xc4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_wdt_status().reg.get(),
            )),
            0xd0..0xd8 => Ok(self.periph.read_wdt_cfg()),
            0xe0..0xe4 => Ok(self.periph.read_mcu_timer_config()),
            0xe4..0xe8 => Ok(self.periph.read_mcu_rv_mtime_l()),
            0xe8..0xec => Ok(self.periph.read_mcu_rv_mtime_h()),
            0xec..0xf0 => Ok(self.periph.read_mcu_rv_mtimecmp_l()),
            0xf0..0xf4 => Ok(self.periph.read_mcu_rv_mtimecmp_h()),
            0x100..0x104 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_reset_request().reg.get(),
            )),
            0x104..0x108 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_bootfsm_go().reg.get(),
            )),
            0x108..0x10c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_boot_go().reg.get(),
            )),
            0x10c..0x110 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_fw_sram_exec_region_size().reg.get(),
            )),
            0x110..0x114 => Ok(self.periph.read_mcu_nmi_vector()),
            0x114..0x118 => Ok(self.periph.read_mcu_reset_vector()),
            0x180..0x194 => Ok(self.periph.read_mbox0_valid_axi_user()),
            0x1a0..0x1b4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_mbox0_axi_user_lock().reg.get(),
            )),
            0x1c0..0x1d4 => Ok(self.periph.read_mbox1_valid_axi_user()),
            0x1e0..0x1f4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_mbox1_axi_user_lock().reg.get(),
            )),
            0x300..0x308 => Ok(self.periph.read_soc_dft_en()),
            0x308..0x310 => Ok(self.periph.read_soc_hw_debug_en()),
            0x310..0x318 => Ok(self.periph.read_soc_prod_debug_state()),
            0x318..0x31c => Ok(self.periph.read_fc_fips_zerozation()),
            0x400..0x408 => Ok(self.periph.read_generic_input_wires()),
            0x408..0x410 => Ok(self.periph.read_generic_output_wires()),
            0x410..0x414 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_debug_in().reg.get(),
            )),
            0x414..0x418 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_debug_out().reg.get(),
            )),
            0x418..0x41c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_ss_debug_intent().reg.get(),
            )),
            0x440..0x444 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_ss_config_done_sticky().reg.get(),
            )),
            0x444..0x448 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_ss_config_done().reg.get(),
            )),
            0x480..0x600 => Ok(self.periph.read_prod_debug_unlock_pk_hash_reg()),
            0x1000..0x1004 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_intr_block_rf_global_intr_en_r().reg.get(),
            )),
            0x1004..0x1008 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_intr_block_rf_error0_intr_en_r().reg.get(),
            )),
            0x1008..0x100c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_intr_block_rf_error1_intr_en_r().reg.get(),
            )),
            0x100c..0x1010 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_intr_block_rf_notif0_intr_en_r().reg.get(),
            )),
            0x1010..0x1014 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_intr_block_rf_notif1_intr_en_r().reg.get(),
            )),
            0x1014..0x1018 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_global_intr_r()
                    .reg
                    .get(),
            )),
            0x1018..0x101c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_global_intr_r()
                    .reg
                    .get(),
            )),
            0x101c..0x1020 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error0_internal_intr_r()
                    .reg
                    .get(),
            )),
            0x1020..0x1024 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error1_internal_intr_r()
                    .reg
                    .get(),
            )),
            0x1024..0x1028 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif0_internal_intr_r()
                    .reg
                    .get(),
            )),
            0x1028..0x102c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif1_internal_intr_r()
                    .reg
                    .get(),
            )),
            0x102c..0x1030 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error0_intr_trig_r()
                    .reg
                    .get(),
            )),
            0x1030..0x1034 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error1_intr_trig_r()
                    .reg
                    .get(),
            )),
            0x1034..0x1038 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif0_intr_trig_r()
                    .reg
                    .get(),
            )),
            0x1038..0x103c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif1_intr_trig_r()
                    .reg
                    .get(),
            )),
            0x1100..0x1104 => Ok(self.periph.read_intr_block_rf_error_internal_intr_count_r()),
            0x1104..0x1108 => Ok(self
                .periph
                .read_intr_block_rf_error_mbox0_inv_dev_intr_count_r()),
            0x1108..0x110c => Ok(self
                .periph
                .read_intr_block_rf_error_mbox1_inv_dev_intr_count_r()),
            0x110c..0x1110 => Ok(self
                .periph
                .read_intr_block_rf_error_mbox0_cmd_fail_intr_count_r()),
            0x1110..0x1114 => Ok(self
                .periph
                .read_intr_block_rf_error_mbox1_cmd_fail_intr_count_r()),
            0x1114..0x1118 => Ok(self
                .periph
                .read_intr_block_rf_error_mbox0_ecc_unc_intr_count_r()),
            0x1118..0x111c => Ok(self
                .periph
                .read_intr_block_rf_error_mbox1_ecc_unc_intr_count_r()),
            0x111c..0x1120 => Ok(self
                .periph
                .read_intr_block_rf_error_mcu_sram_dmi_axi_collision_intr_count_r()),
            0x1120..0x1124 => Ok(self
                .periph
                .read_intr_block_rf_error_wdt_timer1_timeout_intr_count_r()),
            0x1124..0x1128 => Ok(self
                .periph
                .read_intr_block_rf_error_wdt_timer2_timeout_intr_count_r()),
            0x1128..0x112c => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal0_intr_count_r()),
            0x112c..0x1130 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal1_intr_count_r()),
            0x1130..0x1134 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal2_intr_count_r()),
            0x1134..0x1138 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal3_intr_count_r()),
            0x1138..0x113c => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal4_intr_count_r()),
            0x113c..0x1140 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal5_intr_count_r()),
            0x1140..0x1144 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal6_intr_count_r()),
            0x1144..0x1148 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal7_intr_count_r()),
            0x1148..0x114c => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal8_intr_count_r()),
            0x114c..0x1150 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal9_intr_count_r()),
            0x1150..0x1154 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal10_intr_count_r()),
            0x1154..0x1158 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal11_intr_count_r()),
            0x1158..0x115c => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal12_intr_count_r()),
            0x115c..0x1160 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal13_intr_count_r()),
            0x1160..0x1164 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal14_intr_count_r()),
            0x1164..0x1168 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal15_intr_count_r()),
            0x1168..0x116c => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal16_intr_count_r()),
            0x116c..0x1170 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal17_intr_count_r()),
            0x1170..0x1174 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal18_intr_count_r()),
            0x1174..0x1178 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal19_intr_count_r()),
            0x1178..0x117c => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal20_intr_count_r()),
            0x117c..0x1180 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal21_intr_count_r()),
            0x1180..0x1184 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal22_intr_count_r()),
            0x1184..0x1188 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal23_intr_count_r()),
            0x1188..0x118c => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal24_intr_count_r()),
            0x118c..0x1190 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal25_intr_count_r()),
            0x1190..0x1194 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal26_intr_count_r()),
            0x1194..0x1198 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal27_intr_count_r()),
            0x1198..0x119c => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal28_intr_count_r()),
            0x119c..0x11a0 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal29_intr_count_r()),
            0x11a0..0x11a4 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal30_intr_count_r()),
            0x11a4..0x11a8 => Ok(self
                .periph
                .read_intr_block_rf_error_agg_error_fatal31_intr_count_r()),
            0x1200..0x1204 => Ok(self
                .periph
                .read_intr_block_rf_notif_mcu_sram_ecc_cor_intr_count_r()),
            0x1204..0x1208 => Ok(self
                .periph
                .read_intr_block_rf_notif_cptra_mcu_reset_req_intr_count_r()),
            0x1208..0x120c => Ok(self
                .periph
                .read_intr_block_rf_notif_gen_in_toggle_intr_count_r()),
            0x120c..0x1210 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal0_intr_count_r()),
            0x1210..0x1214 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal1_intr_count_r()),
            0x1214..0x1218 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal2_intr_count_r()),
            0x1218..0x121c => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal3_intr_count_r()),
            0x121c..0x1220 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal4_intr_count_r()),
            0x1220..0x1224 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal5_intr_count_r()),
            0x1224..0x1228 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal6_intr_count_r()),
            0x1228..0x122c => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal7_intr_count_r()),
            0x122c..0x1230 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal8_intr_count_r()),
            0x1230..0x1234 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal9_intr_count_r()),
            0x1234..0x1238 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal10_intr_count_r()),
            0x1238..0x123c => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal11_intr_count_r()),
            0x123c..0x1240 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal12_intr_count_r()),
            0x1240..0x1244 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal13_intr_count_r()),
            0x1244..0x1248 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal14_intr_count_r()),
            0x1248..0x124c => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal15_intr_count_r()),
            0x124c..0x1250 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal16_intr_count_r()),
            0x1250..0x1254 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal17_intr_count_r()),
            0x1254..0x1258 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal18_intr_count_r()),
            0x1258..0x125c => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal19_intr_count_r()),
            0x125c..0x1260 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal20_intr_count_r()),
            0x1260..0x1264 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal21_intr_count_r()),
            0x1264..0x1268 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal22_intr_count_r()),
            0x1268..0x126c => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal23_intr_count_r()),
            0x126c..0x1270 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal24_intr_count_r()),
            0x1270..0x1274 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal25_intr_count_r()),
            0x1274..0x1278 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal26_intr_count_r()),
            0x1278..0x127c => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal27_intr_count_r()),
            0x127c..0x1280 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal28_intr_count_r()),
            0x1280..0x1284 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal29_intr_count_r()),
            0x1284..0x1288 => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal30_intr_count_r()),
            0x1288..0x128c => Ok(self
                .periph
                .read_intr_block_rf_notif_agg_error_non_fatal31_intr_count_r()),
            0x128c..0x1290 => Ok(self
                .periph
                .read_intr_block_rf_notif_mbox0_cmd_avail_intr_count_r()),
            0x1290..0x1294 => Ok(self
                .periph
                .read_intr_block_rf_notif_mbox1_cmd_avail_intr_count_r()),
            0x1294..0x1298 => Ok(self
                .periph
                .read_intr_block_rf_notif_cptra_mbox_cmd_avail_intr_count_r()),
            0x1298..0x129c => Ok(self
                .periph
                .read_intr_block_rf_notif_mbox0_ecc_cor_intr_count_r()),
            0x129c..0x12a0 => Ok(self
                .periph
                .read_intr_block_rf_notif_mbox1_ecc_cor_intr_count_r()),
            0x12a0..0x12a4 => Ok(self
                .periph
                .read_intr_block_rf_notif_debug_locked_intr_count_r()),
            0x12a4..0x12a8 => Ok(self
                .periph
                .read_intr_block_rf_notif_scan_mode_intr_count_r()),
            0x12a8..0x12ac => Ok(self
                .periph
                .read_intr_block_rf_notif_mbox0_soc_req_lock_intr_count_r()),
            0x12ac..0x12b0 => Ok(self
                .periph
                .read_intr_block_rf_notif_mbox1_soc_req_lock_intr_count_r()),
            0x1300..0x1304 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_internal_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1304..0x1308 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_mbox0_inv_dev_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1308..0x130c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_mbox1_inv_dev_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x130c..0x1310 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_mbox0_cmd_fail_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1310..0x1314 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_mbox1_cmd_fail_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1314..0x1318 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_mbox0_ecc_unc_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1318..0x131c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_mbox1_ecc_unc_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x131c..0x1320 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_wdt_timer1_timeout_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1320..0x1324 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_wdt_timer2_timeout_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1324..0x1328 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_mcu_sram_dmi_axi_collision_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1328..0x132c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal0_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x132c..0x1330 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal1_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1330..0x1334 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal2_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1334..0x1338 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal3_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1338..0x133c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal4_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x133c..0x1340 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal5_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1340..0x1344 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal6_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1344..0x1348 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal7_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1348..0x134c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal8_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x134c..0x1350 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal9_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1350..0x1354 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal10_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1354..0x1358 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal11_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1358..0x135c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal12_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x135c..0x1360 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal13_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1360..0x1364 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal14_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1364..0x1368 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal15_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1368..0x136c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal16_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x136c..0x1370 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal17_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1370..0x1374 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal18_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1374..0x1378 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal19_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1378..0x137c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal20_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x137c..0x1380 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal21_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1380..0x1384 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal22_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1384..0x1388 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal23_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1388..0x138c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal24_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x138c..0x1390 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal25_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1390..0x1394 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal26_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1394..0x1398 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal27_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1398..0x139c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal28_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x139c..0x13a0 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal29_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13a0..0x13a4 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal30_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13a4..0x13a8 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_error_agg_error_fatal31_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13a8..0x13ac => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_mcu_sram_ecc_cor_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13ac..0x13b0 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_cptra_mcu_reset_req_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13b0..0x13b4 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_gen_in_toggle_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13b4..0x13b8 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal0_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13b8..0x13bc => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal1_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13bc..0x13c0 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal2_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13c0..0x13c4 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal3_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13c4..0x13c8 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal4_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13c8..0x13cc => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal5_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13cc..0x13d0 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal6_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13d0..0x13d4 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal7_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13d4..0x13d8 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal8_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13d8..0x13dc => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal9_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13dc..0x13e0 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal10_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13e0..0x13e4 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal11_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13e4..0x13e8 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal12_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13e8..0x13ec => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal13_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13ec..0x13f0 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal14_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13f0..0x13f4 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal15_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13f4..0x13f8 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal16_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13f8..0x13fc => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal17_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x13fc..0x1400 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal18_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1400..0x1404 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal19_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1404..0x1408 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal20_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1408..0x140c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal21_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x140c..0x1410 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal22_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1410..0x1414 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal23_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1414..0x1418 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal24_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1418..0x141c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal25_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x141c..0x1420 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal26_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1420..0x1424 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal27_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1424..0x1428 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal28_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1428..0x142c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal29_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x142c..0x1430 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal30_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1430..0x1434 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_agg_error_non_fatal31_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1434..0x1438 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_mbox0_cmd_avail_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1438..0x143c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_mbox1_cmd_avail_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x143c..0x1440 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_cptra_mbox_cmd_avail_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1440..0x1444 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_mbox0_ecc_cor_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1444..0x1448 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_mbox1_ecc_cor_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1448..0x144c => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_debug_locked_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x144c..0x1450 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_scan_mode_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1450..0x1454 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_mbox0_soc_req_lock_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            0x1454..0x1458 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_intr_block_rf_notif_mbox1_soc_req_lock_intr_count_incr_r()
                    .reg
                    .get(),
            )),
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
        val: caliptra_emu_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(emulator_bus::BusError::StoreAddrMisaligned);
        }
        match addr {
            0..4 => {
                self.periph.write_hw_capabilities(val);
                Ok(())
            }
            4..8 => {
                self.periph.write_fw_capabilities(val);
                Ok(())
            }
            8..0xc => {
                self.periph
                    .write_cap_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x10..0x18 => {
                self.periph.write_fw_rev_id(val);
                Ok(())
            }
            0x20..0x24 => {
                self.periph.write_fw_flow_status(val);
                Ok(())
            }
            0x40..0x44 => {
                self.periph
                    .write_hw_error_fatal(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x44..0x48 => {
                self.periph
                    .write_agg_error_fatal(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x48..0x4c => {
                self.periph
                    .write_hw_error_non_fatal(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x4c..0x50 => {
                self.periph
                    .write_agg_error_non_fatal(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x50..0x54 => {
                self.periph.write_fw_error_fatal(val);
                Ok(())
            }
            0x54..0x58 => {
                self.periph.write_fw_error_non_fatal(val);
                Ok(())
            }
            0x58..0x5c => {
                self.periph.write_hw_error_enc(val);
                Ok(())
            }
            0x5c..0x60 => {
                self.periph.write_fw_error_enc(val);
                Ok(())
            }
            0x60..0x80 => {
                self.periph.write_fw_extended_error_info(val);
                Ok(())
            }
            0x80..0x84 => {
                self.periph
                    .write_internal_hw_error_fatal_mask(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x84..0x88 => {
                self.periph.write_internal_hw_error_non_fatal_mask(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x88..0x8c => {
                self.periph
                    .write_internal_agg_error_fatal_mask(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x8c..0x90 => {
                self.periph.write_internal_agg_error_non_fatal_mask(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x90..0x94 => {
                self.periph.write_internal_fw_error_fatal_mask(val);
                Ok(())
            }
            0x94..0x98 => {
                self.periph.write_internal_fw_error_non_fatal_mask(val);
                Ok(())
            }
            0xa0..0xa4 => {
                self.periph
                    .write_wdt_timer1_en(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xa4..0xa8 => {
                self.periph
                    .write_wdt_timer1_ctrl(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xa8..0xb0 => {
                self.periph.write_wdt_timer1_timeout_period(val);
                Ok(())
            }
            0xb0..0xb4 => {
                self.periph
                    .write_wdt_timer2_en(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xb4..0xb8 => {
                self.periph
                    .write_wdt_timer2_ctrl(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xb8..0xc0 => {
                self.periph.write_wdt_timer2_timeout_period(val);
                Ok(())
            }
            0xd0..0xd8 => {
                self.periph.write_wdt_cfg(val);
                Ok(())
            }
            0xe0..0xe4 => {
                self.periph.write_mcu_timer_config(val);
                Ok(())
            }
            0xe4..0xe8 => {
                self.periph.write_mcu_rv_mtime_l(val);
                Ok(())
            }
            0xe8..0xec => {
                self.periph.write_mcu_rv_mtime_h(val);
                Ok(())
            }
            0xec..0xf0 => {
                self.periph.write_mcu_rv_mtimecmp_l(val);
                Ok(())
            }
            0xf0..0xf4 => {
                self.periph.write_mcu_rv_mtimecmp_h(val);
                Ok(())
            }
            0x100..0x104 => {
                self.periph
                    .write_reset_request(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x104..0x108 => {
                self.periph
                    .write_bootfsm_go(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x108..0x10c => {
                self.periph
                    .write_cptra_boot_go(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x10c..0x110 => {
                self.periph
                    .write_fw_sram_exec_region_size(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x110..0x114 => {
                self.periph.write_mcu_nmi_vector(val);
                Ok(())
            }
            0x114..0x118 => {
                self.periph.write_mcu_reset_vector(val);
                Ok(())
            }
            0x180..0x194 => {
                self.periph.write_mbox0_valid_axi_user(val);
                Ok(())
            }
            0x1a0..0x1b4 => {
                self.periph
                    .write_mbox0_axi_user_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x1c0..0x1d4 => {
                self.periph.write_mbox1_valid_axi_user(val);
                Ok(())
            }
            0x1e0..0x1f4 => {
                self.periph
                    .write_mbox1_axi_user_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x300..0x308 => {
                self.periph.write_soc_dft_en(val);
                Ok(())
            }
            0x308..0x310 => {
                self.periph.write_soc_hw_debug_en(val);
                Ok(())
            }
            0x310..0x318 => {
                self.periph.write_soc_prod_debug_state(val);
                Ok(())
            }
            0x318..0x31c => {
                self.periph.write_fc_fips_zerozation(val);
                Ok(())
            }
            0x408..0x410 => {
                self.periph.write_generic_output_wires(val);
                Ok(())
            }
            0x410..0x414 => {
                self.periph
                    .write_debug_in(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x414..0x418 => {
                self.periph
                    .write_debug_out(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x440..0x444 => {
                self.periph
                    .write_ss_config_done_sticky(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x444..0x448 => {
                self.periph
                    .write_ss_config_done(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x480..0x600 => {
                self.periph.write_prod_debug_unlock_pk_hash_reg(val);
                Ok(())
            }
            0x1000..0x1004 => {
                self.periph.write_intr_block_rf_global_intr_en_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1004..0x1008 => {
                self.periph.write_intr_block_rf_error0_intr_en_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1008..0x100c => {
                self.periph.write_intr_block_rf_error1_intr_en_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x100c..0x1010 => {
                self.periph.write_intr_block_rf_notif0_intr_en_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1010..0x1014 => {
                self.periph.write_intr_block_rf_notif1_intr_en_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x101c..0x1020 => {
                self.periph.write_intr_block_rf_error0_internal_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1020..0x1024 => {
                self.periph.write_intr_block_rf_error1_internal_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1024..0x1028 => {
                self.periph.write_intr_block_rf_notif0_internal_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1028..0x102c => {
                self.periph.write_intr_block_rf_notif1_internal_intr_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x102c..0x1030 => {
                self.periph.write_intr_block_rf_error0_intr_trig_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1030..0x1034 => {
                self.periph.write_intr_block_rf_error1_intr_trig_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1034..0x1038 => {
                self.periph.write_intr_block_rf_notif0_intr_trig_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1038..0x103c => {
                self.periph.write_intr_block_rf_notif1_intr_trig_r(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x1100..0x1104 => {
                self.periph
                    .write_intr_block_rf_error_internal_intr_count_r(val);
                Ok(())
            }
            0x1104..0x1108 => {
                self.periph
                    .write_intr_block_rf_error_mbox0_inv_dev_intr_count_r(val);
                Ok(())
            }
            0x1108..0x110c => {
                self.periph
                    .write_intr_block_rf_error_mbox1_inv_dev_intr_count_r(val);
                Ok(())
            }
            0x110c..0x1110 => {
                self.periph
                    .write_intr_block_rf_error_mbox0_cmd_fail_intr_count_r(val);
                Ok(())
            }
            0x1110..0x1114 => {
                self.periph
                    .write_intr_block_rf_error_mbox1_cmd_fail_intr_count_r(val);
                Ok(())
            }
            0x1114..0x1118 => {
                self.periph
                    .write_intr_block_rf_error_mbox0_ecc_unc_intr_count_r(val);
                Ok(())
            }
            0x1118..0x111c => {
                self.periph
                    .write_intr_block_rf_error_mbox1_ecc_unc_intr_count_r(val);
                Ok(())
            }
            0x111c..0x1120 => {
                self.periph
                    .write_intr_block_rf_error_mcu_sram_dmi_axi_collision_intr_count_r(val);
                Ok(())
            }
            0x1120..0x1124 => {
                self.periph
                    .write_intr_block_rf_error_wdt_timer1_timeout_intr_count_r(val);
                Ok(())
            }
            0x1124..0x1128 => {
                self.periph
                    .write_intr_block_rf_error_wdt_timer2_timeout_intr_count_r(val);
                Ok(())
            }
            0x1128..0x112c => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal0_intr_count_r(val);
                Ok(())
            }
            0x112c..0x1130 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal1_intr_count_r(val);
                Ok(())
            }
            0x1130..0x1134 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal2_intr_count_r(val);
                Ok(())
            }
            0x1134..0x1138 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal3_intr_count_r(val);
                Ok(())
            }
            0x1138..0x113c => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal4_intr_count_r(val);
                Ok(())
            }
            0x113c..0x1140 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal5_intr_count_r(val);
                Ok(())
            }
            0x1140..0x1144 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal6_intr_count_r(val);
                Ok(())
            }
            0x1144..0x1148 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal7_intr_count_r(val);
                Ok(())
            }
            0x1148..0x114c => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal8_intr_count_r(val);
                Ok(())
            }
            0x114c..0x1150 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal9_intr_count_r(val);
                Ok(())
            }
            0x1150..0x1154 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal10_intr_count_r(val);
                Ok(())
            }
            0x1154..0x1158 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal11_intr_count_r(val);
                Ok(())
            }
            0x1158..0x115c => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal12_intr_count_r(val);
                Ok(())
            }
            0x115c..0x1160 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal13_intr_count_r(val);
                Ok(())
            }
            0x1160..0x1164 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal14_intr_count_r(val);
                Ok(())
            }
            0x1164..0x1168 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal15_intr_count_r(val);
                Ok(())
            }
            0x1168..0x116c => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal16_intr_count_r(val);
                Ok(())
            }
            0x116c..0x1170 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal17_intr_count_r(val);
                Ok(())
            }
            0x1170..0x1174 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal18_intr_count_r(val);
                Ok(())
            }
            0x1174..0x1178 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal19_intr_count_r(val);
                Ok(())
            }
            0x1178..0x117c => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal20_intr_count_r(val);
                Ok(())
            }
            0x117c..0x1180 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal21_intr_count_r(val);
                Ok(())
            }
            0x1180..0x1184 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal22_intr_count_r(val);
                Ok(())
            }
            0x1184..0x1188 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal23_intr_count_r(val);
                Ok(())
            }
            0x1188..0x118c => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal24_intr_count_r(val);
                Ok(())
            }
            0x118c..0x1190 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal25_intr_count_r(val);
                Ok(())
            }
            0x1190..0x1194 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal26_intr_count_r(val);
                Ok(())
            }
            0x1194..0x1198 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal27_intr_count_r(val);
                Ok(())
            }
            0x1198..0x119c => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal28_intr_count_r(val);
                Ok(())
            }
            0x119c..0x11a0 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal29_intr_count_r(val);
                Ok(())
            }
            0x11a0..0x11a4 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal30_intr_count_r(val);
                Ok(())
            }
            0x11a4..0x11a8 => {
                self.periph
                    .write_intr_block_rf_error_agg_error_fatal31_intr_count_r(val);
                Ok(())
            }
            0x1200..0x1204 => {
                self.periph
                    .write_intr_block_rf_notif_mcu_sram_ecc_cor_intr_count_r(val);
                Ok(())
            }
            0x1204..0x1208 => {
                self.periph
                    .write_intr_block_rf_notif_cptra_mcu_reset_req_intr_count_r(val);
                Ok(())
            }
            0x1208..0x120c => {
                self.periph
                    .write_intr_block_rf_notif_gen_in_toggle_intr_count_r(val);
                Ok(())
            }
            0x120c..0x1210 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal0_intr_count_r(val);
                Ok(())
            }
            0x1210..0x1214 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal1_intr_count_r(val);
                Ok(())
            }
            0x1214..0x1218 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal2_intr_count_r(val);
                Ok(())
            }
            0x1218..0x121c => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal3_intr_count_r(val);
                Ok(())
            }
            0x121c..0x1220 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal4_intr_count_r(val);
                Ok(())
            }
            0x1220..0x1224 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal5_intr_count_r(val);
                Ok(())
            }
            0x1224..0x1228 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal6_intr_count_r(val);
                Ok(())
            }
            0x1228..0x122c => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal7_intr_count_r(val);
                Ok(())
            }
            0x122c..0x1230 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal8_intr_count_r(val);
                Ok(())
            }
            0x1230..0x1234 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal9_intr_count_r(val);
                Ok(())
            }
            0x1234..0x1238 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal10_intr_count_r(val);
                Ok(())
            }
            0x1238..0x123c => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal11_intr_count_r(val);
                Ok(())
            }
            0x123c..0x1240 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal12_intr_count_r(val);
                Ok(())
            }
            0x1240..0x1244 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal13_intr_count_r(val);
                Ok(())
            }
            0x1244..0x1248 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal14_intr_count_r(val);
                Ok(())
            }
            0x1248..0x124c => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal15_intr_count_r(val);
                Ok(())
            }
            0x124c..0x1250 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal16_intr_count_r(val);
                Ok(())
            }
            0x1250..0x1254 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal17_intr_count_r(val);
                Ok(())
            }
            0x1254..0x1258 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal18_intr_count_r(val);
                Ok(())
            }
            0x1258..0x125c => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal19_intr_count_r(val);
                Ok(())
            }
            0x125c..0x1260 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal20_intr_count_r(val);
                Ok(())
            }
            0x1260..0x1264 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal21_intr_count_r(val);
                Ok(())
            }
            0x1264..0x1268 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal22_intr_count_r(val);
                Ok(())
            }
            0x1268..0x126c => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal23_intr_count_r(val);
                Ok(())
            }
            0x126c..0x1270 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal24_intr_count_r(val);
                Ok(())
            }
            0x1270..0x1274 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal25_intr_count_r(val);
                Ok(())
            }
            0x1274..0x1278 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal26_intr_count_r(val);
                Ok(())
            }
            0x1278..0x127c => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal27_intr_count_r(val);
                Ok(())
            }
            0x127c..0x1280 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal28_intr_count_r(val);
                Ok(())
            }
            0x1280..0x1284 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal29_intr_count_r(val);
                Ok(())
            }
            0x1284..0x1288 => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal30_intr_count_r(val);
                Ok(())
            }
            0x1288..0x128c => {
                self.periph
                    .write_intr_block_rf_notif_agg_error_non_fatal31_intr_count_r(val);
                Ok(())
            }
            0x128c..0x1290 => {
                self.periph
                    .write_intr_block_rf_notif_mbox0_cmd_avail_intr_count_r(val);
                Ok(())
            }
            0x1290..0x1294 => {
                self.periph
                    .write_intr_block_rf_notif_mbox1_cmd_avail_intr_count_r(val);
                Ok(())
            }
            0x1294..0x1298 => {
                self.periph
                    .write_intr_block_rf_notif_cptra_mbox_cmd_avail_intr_count_r(val);
                Ok(())
            }
            0x1298..0x129c => {
                self.periph
                    .write_intr_block_rf_notif_mbox0_ecc_cor_intr_count_r(val);
                Ok(())
            }
            0x129c..0x12a0 => {
                self.periph
                    .write_intr_block_rf_notif_mbox1_ecc_cor_intr_count_r(val);
                Ok(())
            }
            0x12a0..0x12a4 => {
                self.periph
                    .write_intr_block_rf_notif_debug_locked_intr_count_r(val);
                Ok(())
            }
            0x12a4..0x12a8 => {
                self.periph
                    .write_intr_block_rf_notif_scan_mode_intr_count_r(val);
                Ok(())
            }
            0x12a8..0x12ac => {
                self.periph
                    .write_intr_block_rf_notif_mbox0_soc_req_lock_intr_count_r(val);
                Ok(())
            }
            0x12ac..0x12b0 => {
                self.periph
                    .write_intr_block_rf_notif_mbox1_soc_req_lock_intr_count_r(val);
                Ok(())
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
