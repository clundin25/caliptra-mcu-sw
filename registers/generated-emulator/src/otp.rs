// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 4f006115433f926f4e599bc8718a39168f70ce5f
//
//
// Warning: caliptra-ss was dirty: M third_party/caliptra-rtl
// M third_party/i3c-core
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait OtpPeripheral {
    fn set_dma_ram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<emulator_bus::Ram>>) {}
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_interrupt_state(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::InterruptState::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_interrupt_state(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::InterruptState::Register,
        >,
    ) {
    }
    fn read_otp_interrupt_enable(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::OtpInterruptEnable::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_otp_interrupt_enable(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::OtpInterruptEnable::Register,
        >,
    ) {
    }
    fn write_interrupt_test(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::InterruptTest::Register,
        >,
    ) {
    }
    fn write_alert_test(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::lc_ctrl::bits::AlertTest::Register,
        >,
    ) {
    }
    fn read_otp_status(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::OtpStatus::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_direct_access_regwen(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::DirectAccessRegwen::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_direct_access_regwen(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::DirectAccessRegwen::Register,
        >,
    ) {
    }
    fn write_direct_access_cmd(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::DirectAccessCmd::Register,
        >,
    ) {
    }
    fn read_direct_access_address(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::DirectAccessAddress::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_direct_access_address(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::DirectAccessAddress::Register,
        >,
    ) {
    }
    fn read_check_trigger_regwen(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::CheckTriggerRegwen::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_check_trigger_regwen(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::CheckTriggerRegwen::Register,
        >,
    ) {
    }
    fn write_check_trigger(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::CheckTrigger::Register,
        >,
    ) {
    }
    fn write_check_regwen(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::CheckRegwen::Register,
        >,
    ) {
    }
    fn read_check_timeout(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_check_timeout(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_integrity_check_period(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_integrity_check_period(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_consistency_check_period(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_consistency_check_period(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_sw_manuf_partition_read_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::SwManufPartitionReadLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_sw_manuf_partition_read_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::SwManufPartitionReadLock::Register,
        >,
    ) {
    }
    fn read_svn_partition_read_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::SvnPartitionReadLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_svn_partition_read_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::SvnPartitionReadLock::Register,
        >,
    ) {
    }
    fn read_vendor_test_partition_read_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::VendorTestPartitionReadLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_vendor_test_partition_read_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::VendorTestPartitionReadLock::Register,
        >,
    ) {
    }
    fn read_vendor_hashes_manuf_partition_read_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::VendorHashesManufPartitionReadLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_vendor_hashes_manuf_partition_read_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::VendorHashesManufPartitionReadLock::Register,
        >,
    ) {
    }
    fn read_vendor_hashes_prod_partition_read_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::VendorHashesProdPartitionReadLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_vendor_hashes_prod_partition_read_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::VendorHashesProdPartitionReadLock::Register,
        >,
    ) {
    }
    fn read_vendor_revocations_prod_partition_read_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::VendorRevocationsProdPartitionReadLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_vendor_revocations_prod_partition_read_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::VendorRevocationsProdPartitionReadLock::Register,
        >,
    ) {
    }
    fn read_vendor_non_secret_prod_partition_read_lock(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::VendorNonSecretProdPartitionReadLock::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_vendor_non_secret_prod_partition_read_lock(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::VendorNonSecretProdPartitionReadLock::Register,
        >,
    ) {
    }
    fn read_vendor_pk_hash_volatile_lock(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_vendor_pk_hash_volatile_lock(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_csr0(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::otp_ctrl::bits::Csr0::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_csr0(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::Csr0::Register,
        >,
    ) {
    }
    fn read_csr1(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::otp_ctrl::bits::Csr1::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_csr1(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::Csr1::Register,
        >,
    ) {
    }
    fn read_csr2(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::otp_ctrl::bits::Csr2::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_csr2(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::Csr2::Register,
        >,
    ) {
    }
    fn read_csr3(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::otp_ctrl::bits::Csr3::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_csr3(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::Csr3::Register,
        >,
    ) {
    }
    fn read_csr4(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::otp_ctrl::bits::Csr4::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_csr4(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::Csr4::Register,
        >,
    ) {
    }
    fn read_csr5(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::otp_ctrl::bits::Csr5::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_csr5(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::Csr5::Register,
        >,
    ) {
    }
    fn read_csr6(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::otp_ctrl::bits::Csr6::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn write_csr6(
        &mut self,
        _val: emulator_bus::ReadWriteRegister<
            u32,
            registers_generated::otp_ctrl::bits::Csr6::Register,
        >,
    ) {
    }
    fn read_csr7(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<u32, registers_generated::otp_ctrl::bits::Csr7::Register>
    {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_0(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_1(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_2(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_3(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_4(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_5(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_6(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_7(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_8(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_9(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_10(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_11(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_12(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_13(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_14(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_15(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_16(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_err_code_rf_err_code_17(
        &mut self,
    ) -> emulator_bus::ReadWriteRegister<
        u32,
        registers_generated::otp_ctrl::bits::ErrCodeRegT::Register,
    > {
        emulator_bus::ReadWriteRegister::new(0)
    }
    fn read_dai_wdata_rf_direct_access_wdata_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_dai_wdata_rf_direct_access_wdata_0(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_dai_wdata_rf_direct_access_wdata_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_dai_wdata_rf_direct_access_wdata_1(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_dai_rdata_rf_direct_access_rdata_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_dai_rdata_rf_direct_access_rdata_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_test_unlock_partition_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_test_unlock_partition_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_manuf_partition_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_manuf_partition_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_prod_partition_0_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_prod_partition_0_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_prod_partition_1_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_prod_partition_1_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_prod_partition_2_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_prod_partition_2_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_prod_partition_3_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_prod_partition_3_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_sw_manuf_partition_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_sw_manuf_partition_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_lc_transition_partition_digest_digest_0(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn read_secret_lc_transition_partition_digest_digest_1(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_test_partition_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_test_partition_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_hashes_manuf_partition_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_hashes_manuf_partition_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_hashes_prod_partition_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_hashes_prod_partition_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_revocations_prod_partition_digest_digest_0(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_revocations_prod_partition_digest_digest_1(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_secret_prod_partition_digest_digest_0(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_secret_prod_partition_digest_digest_1(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_non_secret_prod_partition_digest_digest_0(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn read_vendor_non_secret_prod_partition_digest_digest_1(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
}
pub struct OtpBus {
    pub periph: Box<dyn OtpPeripheral>,
}
impl emulator_bus::Bus for OtpBus {
    fn read(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
    ) -> Result<caliptra_emu_types::RvData, emulator_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(emulator_bus::BusError::LoadAddrMisaligned);
        }
        match addr {
            0..4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_interrupt_state().reg.get(),
            )),
            4..8 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_otp_interrupt_enable().reg.get(),
            )),
            0x10..0x14 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_otp_status().reg.get(),
            )),
            0x5c..0x60 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_direct_access_regwen().reg.get(),
            )),
            0x64..0x68 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_direct_access_address().reg.get(),
            )),
            0x78..0x7c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_check_trigger_regwen().reg.get(),
            )),
            0x84..0x88 => Ok(self.periph.read_check_timeout()),
            0x88..0x8c => Ok(self.periph.read_integrity_check_period()),
            0x8c..0x90 => Ok(self.periph.read_consistency_check_period()),
            0x90..0x94 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_sw_manuf_partition_read_lock().reg.get(),
            )),
            0x94..0x98 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_svn_partition_read_lock().reg.get(),
            )),
            0x98..0x9c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_vendor_test_partition_read_lock().reg.get(),
            )),
            0x9c..0xa0 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_vendor_hashes_manuf_partition_read_lock()
                    .reg
                    .get(),
            )),
            0xa0..0xa4 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_vendor_hashes_prod_partition_read_lock()
                    .reg
                    .get(),
            )),
            0xa4..0xa8 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_vendor_revocations_prod_partition_read_lock()
                    .reg
                    .get(),
            )),
            0xa8..0xac => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_vendor_non_secret_prod_partition_read_lock()
                    .reg
                    .get(),
            )),
            0xac..0xb0 => Ok(self.periph.read_vendor_pk_hash_volatile_lock()),
            0x120..0x124 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_csr0().reg.get(),
            )),
            0x124..0x128 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_csr1().reg.get(),
            )),
            0x128..0x12c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_csr2().reg.get(),
            )),
            0x12c..0x130 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_csr3().reg.get(),
            )),
            0x130..0x134 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_csr4().reg.get(),
            )),
            0x134..0x138 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_csr5().reg.get(),
            )),
            0x138..0x13c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_csr6().reg.get(),
            )),
            0x13c..0x140 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_csr7().reg.get(),
            )),
            0x14..0x18 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_0().reg.get(),
            )),
            0x18..0x1c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_1().reg.get(),
            )),
            0x1c..0x20 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_2().reg.get(),
            )),
            0x20..0x24 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_3().reg.get(),
            )),
            0x24..0x28 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_4().reg.get(),
            )),
            0x28..0x2c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_5().reg.get(),
            )),
            0x2c..0x30 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_6().reg.get(),
            )),
            0x30..0x34 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_7().reg.get(),
            )),
            0x34..0x38 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_8().reg.get(),
            )),
            0x38..0x3c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_9().reg.get(),
            )),
            0x3c..0x40 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_10().reg.get(),
            )),
            0x40..0x44 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_11().reg.get(),
            )),
            0x44..0x48 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_12().reg.get(),
            )),
            0x48..0x4c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_13().reg.get(),
            )),
            0x4c..0x50 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_14().reg.get(),
            )),
            0x50..0x54 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_15().reg.get(),
            )),
            0x54..0x58 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_16().reg.get(),
            )),
            0x58..0x5c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_err_code_rf_err_code_17().reg.get(),
            )),
            0x68..0x6c => Ok(self.periph.read_dai_wdata_rf_direct_access_wdata_0()),
            0x6c..0x70 => Ok(self.periph.read_dai_wdata_rf_direct_access_wdata_1()),
            0x70..0x74 => Ok(self.periph.read_dai_rdata_rf_direct_access_rdata_0()),
            0x74..0x78 => Ok(self.periph.read_dai_rdata_rf_direct_access_rdata_1()),
            0xb0..0xb4 => Ok(self
                .periph
                .read_secret_test_unlock_partition_digest_digest_0()),
            0xb4..0xb8 => Ok(self
                .periph
                .read_secret_test_unlock_partition_digest_digest_1()),
            0xb8..0xbc => Ok(self.periph.read_secret_manuf_partition_digest_digest_0()),
            0xbc..0xc0 => Ok(self.periph.read_secret_manuf_partition_digest_digest_1()),
            0xc0..0xc4 => Ok(self.periph.read_secret_prod_partition_0_digest_digest_0()),
            0xc4..0xc8 => Ok(self.periph.read_secret_prod_partition_0_digest_digest_1()),
            0xc8..0xcc => Ok(self.periph.read_secret_prod_partition_1_digest_digest_0()),
            0xcc..0xd0 => Ok(self.periph.read_secret_prod_partition_1_digest_digest_1()),
            0xd0..0xd4 => Ok(self.periph.read_secret_prod_partition_2_digest_digest_0()),
            0xd4..0xd8 => Ok(self.periph.read_secret_prod_partition_2_digest_digest_1()),
            0xd8..0xdc => Ok(self.periph.read_secret_prod_partition_3_digest_digest_0()),
            0xdc..0xe0 => Ok(self.periph.read_secret_prod_partition_3_digest_digest_1()),
            0xe0..0xe4 => Ok(self.periph.read_sw_manuf_partition_digest_digest_0()),
            0xe4..0xe8 => Ok(self.periph.read_sw_manuf_partition_digest_digest_1()),
            0xe8..0xec => Ok(self
                .periph
                .read_secret_lc_transition_partition_digest_digest_0()),
            0xec..0xf0 => Ok(self
                .periph
                .read_secret_lc_transition_partition_digest_digest_1()),
            0xf0..0xf4 => Ok(self.periph.read_vendor_test_partition_digest_digest_0()),
            0xf4..0xf8 => Ok(self.periph.read_vendor_test_partition_digest_digest_1()),
            0xf8..0xfc => Ok(self
                .periph
                .read_vendor_hashes_manuf_partition_digest_digest_0()),
            0xfc..0x100 => Ok(self
                .periph
                .read_vendor_hashes_manuf_partition_digest_digest_1()),
            0x100..0x104 => Ok(self
                .periph
                .read_vendor_hashes_prod_partition_digest_digest_0()),
            0x104..0x108 => Ok(self
                .periph
                .read_vendor_hashes_prod_partition_digest_digest_1()),
            0x108..0x10c => Ok(self
                .periph
                .read_vendor_revocations_prod_partition_digest_digest_0()),
            0x10c..0x110 => Ok(self
                .periph
                .read_vendor_revocations_prod_partition_digest_digest_1()),
            0x110..0x114 => Ok(self
                .periph
                .read_vendor_secret_prod_partition_digest_digest_0()),
            0x114..0x118 => Ok(self
                .periph
                .read_vendor_secret_prod_partition_digest_digest_1()),
            0x118..0x11c => Ok(self
                .periph
                .read_vendor_non_secret_prod_partition_digest_digest_0()),
            0x11c..0x120 => Ok(self
                .periph
                .read_vendor_non_secret_prod_partition_digest_digest_1()),
            _ => Err(emulator_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
        val: caliptra_emu_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(emulator_bus::BusError::StoreAddrMisaligned);
        }
        match addr {
            0..4 => {
                self.periph
                    .write_interrupt_state(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            4..8 => {
                self.periph
                    .write_otp_interrupt_enable(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            8..0xc => {
                self.periph
                    .write_interrupt_test(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xc..0x10 => {
                self.periph
                    .write_alert_test(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x5c..0x60 => {
                self.periph
                    .write_direct_access_regwen(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x60..0x64 => {
                self.periph
                    .write_direct_access_cmd(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x64..0x68 => {
                self.periph
                    .write_direct_access_address(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x78..0x7c => {
                self.periph
                    .write_check_trigger_regwen(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x7c..0x80 => {
                self.periph
                    .write_check_trigger(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x80..0x84 => {
                self.periph
                    .write_check_regwen(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x84..0x88 => {
                self.periph.write_check_timeout(val);
                Ok(())
            }
            0x88..0x8c => {
                self.periph.write_integrity_check_period(val);
                Ok(())
            }
            0x8c..0x90 => {
                self.periph.write_consistency_check_period(val);
                Ok(())
            }
            0x90..0x94 => {
                self.periph
                    .write_sw_manuf_partition_read_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x94..0x98 => {
                self.periph
                    .write_svn_partition_read_lock(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x98..0x9c => {
                self.periph.write_vendor_test_partition_read_lock(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x9c..0xa0 => {
                self.periph.write_vendor_hashes_manuf_partition_read_lock(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0xa0..0xa4 => {
                self.periph.write_vendor_hashes_prod_partition_read_lock(
                    emulator_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0xa4..0xa8 => {
                self.periph
                    .write_vendor_revocations_prod_partition_read_lock(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            0xa8..0xac => {
                self.periph
                    .write_vendor_non_secret_prod_partition_read_lock(
                        emulator_bus::ReadWriteRegister::new(val),
                    );
                Ok(())
            }
            0xac..0xb0 => {
                self.periph.write_vendor_pk_hash_volatile_lock(val);
                Ok(())
            }
            0x120..0x124 => {
                self.periph
                    .write_csr0(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x124..0x128 => {
                self.periph
                    .write_csr1(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x128..0x12c => {
                self.periph
                    .write_csr2(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x12c..0x130 => {
                self.periph
                    .write_csr3(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x130..0x134 => {
                self.periph
                    .write_csr4(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x134..0x138 => {
                self.periph
                    .write_csr5(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x138..0x13c => {
                self.periph
                    .write_csr6(emulator_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x68..0x6c => {
                self.periph.write_dai_wdata_rf_direct_access_wdata_0(val);
                Ok(())
            }
            0x6c..0x70 => {
                self.periph.write_dai_wdata_rf_direct_access_wdata_1(val);
                Ok(())
            }
            _ => Err(emulator_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
