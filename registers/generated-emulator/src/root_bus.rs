// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 4f006115433f926f4e599bc8718a39168f70ce5f
//
/// Offsets for peripherals mounted to the root bus.
#[derive(Clone, Debug)]
pub struct AutoRootBusOffsets {
    pub dccm_offset: u32,
    pub dccm_size: u32,
    pub i3c_offset: u32,
    pub i3c_size: u32,
    pub main_flash_offset: u32,
    pub main_flash_size: u32,
    pub recovery_flash_offset: u32,
    pub recovery_flash_size: u32,
    pub mci_offset: u32,
    pub mci_size: u32,
    pub dma_offset: u32,
    pub dma_size: u32,
    pub mbox_offset: u32,
    pub mbox_size: u32,
    pub sha512_acc_offset: u32,
    pub sha512_acc_size: u32,
    pub soc_offset: u32,
    pub soc_size: u32,
    pub el2_pic_offset: u32,
    pub el2_pic_size: u32,
    pub otp_offset: u32,
    pub otp_size: u32,
    pub lc_offset: u32,
    pub lc_size: u32,
}
impl Default for AutoRootBusOffsets {
    fn default() -> Self {
        Self {
            dccm_offset: 0x5000_8000, // Move to 0x5000_8000 to avoid overlap with SRAM for ROM
            dccm_size: 0x4000,
            i3c_offset: 0x2000_4000,
            i3c_size: 0x1000,
            main_flash_offset: 0x2000_8000,
            main_flash_size: 0x20,
            recovery_flash_offset: 0x2000_8800,
            recovery_flash_size: 0x20,
            mci_offset: 0x2100_0000,
            mci_size: 0xe0_0000,
            dma_offset: 0x3000_0000,
            dma_size: 0x24,
            mbox_offset: 0x3002_0000,
            mbox_size: 0x28,
            sha512_acc_offset: 0x3002_1000,
            sha512_acc_size: 0xa14,
            soc_offset: 0x3003_0000,
            soc_size: 0x5e0,
            el2_pic_offset: 0x6000_0000,
            el2_pic_size: 0x5400,
            otp_offset: 0x7000_0000,
            otp_size: 0x140,
            lc_offset: 0x7000_0400,
            lc_size: 0x8c,
        }
    }
}
pub struct AutoRootBus {
    delegates: Vec<Box<dyn emulator_bus::Bus>>,
    offsets: AutoRootBusOffsets,
    pub dccm: emulator_bus::Ram,
    pub i3c_periph: Option<crate::i3c::I3cBus>,
    pub main_flash_periph: Option<crate::main_flash::MainFlashBus>,
    pub recovery_flash_periph: Option<crate::recovery_flash::RecoveryFlashBus>,
    pub mci_periph: Option<crate::mci::MciBus>,
    pub dma_periph: Option<crate::dma::DmaBus>,
    pub mbox_periph: Option<crate::mbox::MboxBus>,
    pub sha512_acc_periph: Option<crate::sha512_acc::Sha512AccBus>,
    pub soc_periph: Option<crate::soc::SocBus>,
    pub el2_pic_periph: Option<crate::el2_pic::El2PicBus>,
    pub otp_periph: Option<crate::otp::OtpBus>,
    pub lc_periph: Option<crate::lc::LcBus>,
}
impl AutoRootBus {
    #[allow(clippy::too_many_arguments)]
    pub fn new(
        delegates: Vec<Box<dyn emulator_bus::Bus>>,
        offsets: Option<AutoRootBusOffsets>,
        i3c_periph: Option<Box<dyn crate::i3c::I3cPeripheral>>,
        main_flash_periph: Option<Box<dyn crate::main_flash::MainFlashPeripheral>>,
        recovery_flash_periph: Option<Box<dyn crate::recovery_flash::RecoveryFlashPeripheral>>,
        mci_periph: Option<Box<dyn crate::mci::MciPeripheral>>,
        dma_periph: Option<Box<dyn crate::dma::DmaPeripheral>>,
        mbox_periph: Option<Box<dyn crate::mbox::MboxPeripheral>>,
        sha512_acc_periph: Option<Box<dyn crate::sha512_acc::Sha512AccPeripheral>>,
        soc_periph: Option<Box<dyn crate::soc::SocPeripheral>>,
        el2_pic_periph: Option<Box<dyn crate::el2_pic::El2PicPeripheral>>,
        otp_periph: Option<Box<dyn crate::otp::OtpPeripheral>>,
        lc_periph: Option<Box<dyn crate::lc::LcPeripheral>>,
    ) -> Self {
        Self {
            delegates,
            offsets: offsets.unwrap_or_default(),
            dccm: emulator_bus::Ram::new(vec![0; 16384i32 as usize]),
            i3c_periph: i3c_periph.map(|p| crate::i3c::I3cBus { periph: p }),
            main_flash_periph: main_flash_periph
                .map(|p| crate::main_flash::MainFlashBus { periph: p }),
            recovery_flash_periph: recovery_flash_periph
                .map(|p| crate::recovery_flash::RecoveryFlashBus { periph: p }),
            mci_periph: mci_periph.map(|p| crate::mci::MciBus { periph: p }),
            dma_periph: dma_periph.map(|p| crate::dma::DmaBus { periph: p }),
            mbox_periph: mbox_periph.map(|p| crate::mbox::MboxBus { periph: p }),
            sha512_acc_periph: sha512_acc_periph
                .map(|p| crate::sha512_acc::Sha512AccBus { periph: p }),
            soc_periph: soc_periph.map(|p| crate::soc::SocBus { periph: p }),
            el2_pic_periph: el2_pic_periph.map(|p| crate::el2_pic::El2PicBus { periph: p }),
            otp_periph: otp_periph.map(|p| crate::otp::OtpBus { periph: p }),
            lc_periph: lc_periph.map(|p| crate::lc::LcBus { periph: p }),
        }
    }
}
impl emulator_bus::Bus for AutoRootBus {
    fn read(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
    ) -> Result<caliptra_emu_types::RvData, emulator_bus::BusError> {
        if addr >= self.offsets.dccm_offset
            && addr < self.offsets.dccm_offset + self.offsets.dccm_size
        {
            return self.dccm.read(size, addr - self.offsets.dccm_offset);
        }
        if addr >= self.offsets.i3c_offset && addr < self.offsets.i3c_offset + self.offsets.i3c_size
        {
            if let Some(periph) = self.i3c_periph.as_mut() {
                return periph.read(size, addr - self.offsets.i3c_offset);
            }
        }
        if addr >= self.offsets.main_flash_offset
            && addr < self.offsets.main_flash_offset + self.offsets.main_flash_size
        {
            if let Some(periph) = self.main_flash_periph.as_mut() {
                return periph.read(size, addr - self.offsets.main_flash_offset);
            }
        }
        if addr >= self.offsets.recovery_flash_offset
            && addr < self.offsets.recovery_flash_offset + self.offsets.recovery_flash_size
        {
            if let Some(periph) = self.recovery_flash_periph.as_mut() {
                return periph.read(size, addr - self.offsets.recovery_flash_offset);
            }
        }
        if addr >= self.offsets.mci_offset && addr < self.offsets.mci_offset + self.offsets.mci_size
        {
            if let Some(periph) = self.mci_periph.as_mut() {
                return periph.read(size, addr - self.offsets.mci_offset);
            }
        }
        if addr >= self.offsets.dma_offset && addr < self.offsets.dma_offset + self.offsets.dma_size
        {
            if let Some(periph) = self.dma_periph.as_mut() {
                return periph.read(size, addr - self.offsets.dma_offset);
            }
        }
        if addr >= self.offsets.mbox_offset
            && addr < self.offsets.mbox_offset + self.offsets.mbox_size
        {
            if let Some(periph) = self.mbox_periph.as_mut() {
                return periph.read(size, addr - self.offsets.mbox_offset);
            }
        }
        if addr >= self.offsets.sha512_acc_offset
            && addr < self.offsets.sha512_acc_offset + self.offsets.sha512_acc_size
        {
            if let Some(periph) = self.sha512_acc_periph.as_mut() {
                return periph.read(size, addr - self.offsets.sha512_acc_offset);
            }
        }
        if addr >= self.offsets.soc_offset && addr < self.offsets.soc_offset + self.offsets.soc_size
        {
            if let Some(periph) = self.soc_periph.as_mut() {
                return periph.read(size, addr - self.offsets.soc_offset);
            }
        }
        if addr >= self.offsets.el2_pic_offset
            && addr < self.offsets.el2_pic_offset + self.offsets.el2_pic_size
        {
            if let Some(periph) = self.el2_pic_periph.as_mut() {
                return periph.read(size, addr - self.offsets.el2_pic_offset);
            }
        }
        if addr >= self.offsets.otp_offset && addr < self.offsets.otp_offset + self.offsets.otp_size
        {
            if let Some(periph) = self.otp_periph.as_mut() {
                return periph.read(size, addr - self.offsets.otp_offset);
            }
        }
        if addr >= self.offsets.lc_offset && addr < self.offsets.lc_offset + self.offsets.lc_size {
            if let Some(periph) = self.lc_periph.as_mut() {
                return periph.read(size, addr - self.offsets.lc_offset);
            }
        }
        for delegate in self.delegates.iter_mut() {
            let result = delegate.read(size, addr);
            if !matches!(result, Err(emulator_bus::BusError::LoadAccessFault)) {
                return result;
            }
        }
        Err(emulator_bus::BusError::LoadAccessFault)
    }
    fn write(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
        val: caliptra_emu_types::RvData,
    ) -> Result<(), emulator_bus::BusError> {
        if addr >= self.offsets.dccm_offset
            && addr < self.offsets.dccm_offset + self.offsets.dccm_size
        {
            return self.dccm.write(size, addr - self.offsets.dccm_offset, val);
        }
        if addr >= self.offsets.i3c_offset && addr < self.offsets.i3c_offset + self.offsets.i3c_size
        {
            if let Some(periph) = self.i3c_periph.as_mut() {
                return periph.write(size, addr - self.offsets.i3c_offset, val);
            }
        }
        if addr >= self.offsets.main_flash_offset
            && addr < self.offsets.main_flash_offset + self.offsets.main_flash_size
        {
            if let Some(periph) = self.main_flash_periph.as_mut() {
                return periph.write(size, addr - self.offsets.main_flash_offset, val);
            }
        }
        if addr >= self.offsets.recovery_flash_offset
            && addr < self.offsets.recovery_flash_offset + self.offsets.recovery_flash_size
        {
            if let Some(periph) = self.recovery_flash_periph.as_mut() {
                return periph.write(size, addr - self.offsets.recovery_flash_offset, val);
            }
        }
        if addr >= self.offsets.mci_offset && addr < self.offsets.mci_offset + self.offsets.mci_size
        {
            if let Some(periph) = self.mci_periph.as_mut() {
                return periph.write(size, addr - self.offsets.mci_offset, val);
            }
        }
        if addr >= self.offsets.dma_offset && addr < self.offsets.dma_offset + self.offsets.dma_size
        {
            if let Some(periph) = self.dma_periph.as_mut() {
                return periph.write(size, addr - self.offsets.dma_offset, val);
            }
        }
        if addr >= self.offsets.mbox_offset
            && addr < self.offsets.mbox_offset + self.offsets.mbox_size
        {
            if let Some(periph) = self.mbox_periph.as_mut() {
                return periph.write(size, addr - self.offsets.mbox_offset, val);
            }
        }
        if addr >= self.offsets.sha512_acc_offset
            && addr < self.offsets.sha512_acc_offset + self.offsets.sha512_acc_size
        {
            if let Some(periph) = self.sha512_acc_periph.as_mut() {
                return periph.write(size, addr - self.offsets.sha512_acc_offset, val);
            }
        }
        if addr >= self.offsets.soc_offset && addr < self.offsets.soc_offset + self.offsets.soc_size
        {
            if let Some(periph) = self.soc_periph.as_mut() {
                return periph.write(size, addr - self.offsets.soc_offset, val);
            }
        }
        if addr >= self.offsets.el2_pic_offset
            && addr < self.offsets.el2_pic_offset + self.offsets.el2_pic_size
        {
            if let Some(periph) = self.el2_pic_periph.as_mut() {
                return periph.write(size, addr - self.offsets.el2_pic_offset, val);
            }
        }
        if addr >= self.offsets.otp_offset && addr < self.offsets.otp_offset + self.offsets.otp_size
        {
            if let Some(periph) = self.otp_periph.as_mut() {
                return periph.write(size, addr - self.offsets.otp_offset, val);
            }
        }
        if addr >= self.offsets.lc_offset && addr < self.offsets.lc_offset + self.offsets.lc_size {
            if let Some(periph) = self.lc_periph.as_mut() {
                return periph.write(size, addr - self.offsets.lc_offset, val);
            }
        }
        for delegate in self.delegates.iter_mut() {
            let result = delegate.write(size, addr, val);
            if !matches!(result, Err(emulator_bus::BusError::StoreAccessFault)) {
                return result;
            }
        }
        Err(emulator_bus::BusError::StoreAccessFault)
    }
    fn poll(&mut self) {
        if let Some(periph) = self.i3c_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.main_flash_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.recovery_flash_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.mci_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.dma_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.mbox_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.sha512_acc_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.soc_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.el2_pic_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.otp_periph.as_mut() {
            periph.poll();
        }
        if let Some(periph) = self.lc_periph.as_mut() {
            periph.poll();
        }
        for delegate in self.delegates.iter_mut() {
            delegate.poll();
        }
    }
    fn warm_reset(&mut self) {
        if let Some(periph) = self.i3c_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.main_flash_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.recovery_flash_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.mci_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.dma_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.mbox_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.sha512_acc_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.soc_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.el2_pic_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.otp_periph.as_mut() {
            periph.warm_reset();
        }
        if let Some(periph) = self.lc_periph.as_mut() {
            periph.warm_reset();
        }
        for delegate in self.delegates.iter_mut() {
            delegate.warm_reset();
        }
    }
    fn update_reset(&mut self) {
        if let Some(periph) = self.i3c_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.main_flash_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.recovery_flash_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.mci_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.dma_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.mbox_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.sha512_acc_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.soc_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.el2_pic_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.otp_periph.as_mut() {
            periph.update_reset();
        }
        if let Some(periph) = self.lc_periph.as_mut() {
            periph.update_reset();
        }
        for delegate in self.delegates.iter_mut() {
            delegate.update_reset();
        }
    }
    fn incoming_event(&mut self, event: std::rc::Rc<caliptra_emu_bus::Event>) {
        if let Some(periph) = self.i3c_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.main_flash_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.recovery_flash_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.mci_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.dma_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.mbox_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.sha512_acc_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.soc_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.el2_pic_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.otp_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        if let Some(periph) = self.lc_periph.as_mut() {
            periph.incoming_event(event.clone());
        }
        for delegate in self.delegates.iter_mut() {
            delegate.incoming_event(event.clone());
        }
    }
    fn register_outgoing_events(
        &mut self,
        sender: std::sync::mpsc::Sender<caliptra_emu_bus::Event>,
    ) {
        if let Some(periph) = self.i3c_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.main_flash_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.recovery_flash_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.mci_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.dma_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.mbox_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.sha512_acc_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.soc_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.el2_pic_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.otp_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        if let Some(periph) = self.lc_periph.as_mut() {
            periph.register_outgoing_events(sender.clone());
        }
        for delegate in self.delegates.iter_mut() {
            delegate.register_outgoing_events(sender.clone());
        }
    }
}
