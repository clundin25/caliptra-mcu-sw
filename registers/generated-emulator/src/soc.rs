// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 39dd3917923c26515ca02c547807706f797428df
//
#[allow(unused_imports)]
use tock_registers::interfaces::{Readable, Writeable};
pub trait SocPeripheral {
    fn set_dma_ram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<caliptra_emu_bus::Ram>>) {}
    fn set_dma_rom_sram(&mut self, _ram: std::rc::Rc<std::cell::RefCell<caliptra_emu_bus::Ram>>) {}
    fn register_event_channels(
        &mut self,
        _events_to_caliptra: std::sync::mpsc::Sender<caliptra_emu_bus::Event>,
        _events_from_caliptra: std::sync::mpsc::Receiver<caliptra_emu_bus::Event>,
        _events_to_mcu: std::sync::mpsc::Sender<caliptra_emu_bus::Event>,
        _events_from_mcu: std::sync::mpsc::Receiver<caliptra_emu_bus::Event>,
    ) {
    }
    fn poll(&mut self) {}
    fn warm_reset(&mut self) {}
    fn update_reset(&mut self) {}
    fn read_cptra_hw_error_fatal(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraHwErrorFatal::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_hw_error_fatal(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraHwErrorFatal::Register,
        >,
    ) {
    }
    fn read_cptra_hw_error_non_fatal(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraHwErrorNonFatal::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_hw_error_non_fatal(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraHwErrorNonFatal::Register,
        >,
    ) {
    }
    fn read_cptra_fw_error_fatal(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_fw_error_fatal(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_fw_error_non_fatal(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_fw_error_non_fatal(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_hw_error_enc(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_hw_error_enc(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_fw_error_enc(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_fw_error_enc(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_fw_extended_error_info(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_fw_extended_error_info(
        &mut self,
        _val: caliptra_emu_types::RvData,
        _index: usize,
    ) {
    }
    fn read_cptra_boot_status(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_boot_status(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_flow_status(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraFlowStatus::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_flow_status(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraFlowStatus::Register,
        >,
    ) {
    }
    fn read_cptra_reset_reason(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraResetReason::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_cptra_security_state(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraSecurityState::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_cptra_mbox_valid_axi_user(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_mbox_valid_axi_user(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {
    }
    fn read_cptra_mbox_axi_user_lock(
        &mut self,
        _index: usize,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraXxxxAxiUserLock::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_mbox_axi_user_lock(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraXxxxAxiUserLock::Register,
        >,
        _index: usize,
    ) {
    }
    fn read_cptra_trng_valid_axi_user(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_trng_valid_axi_user(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_trng_axi_user_lock(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraXxxxAxiUserLock::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_trng_axi_user_lock(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraXxxxAxiUserLock::Register,
        >,
    ) {
    }
    fn read_cptra_trng_data(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_trng_data(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_cptra_trng_ctrl(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraTrngCtrl::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_trng_ctrl(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraTrngCtrl::Register,
        >,
    ) {
    }
    fn read_cptra_trng_status(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraTrngStatus::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_trng_status(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraTrngStatus::Register,
        >,
    ) {
    }
    fn read_cptra_fuse_wr_done(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraFuseWrDone::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_fuse_wr_done(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraFuseWrDone::Register,
        >,
    ) {
    }
    fn read_cptra_timer_config(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_timer_config(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_bootfsm_go(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraBootfsmGo::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_bootfsm_go(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraBootfsmGo::Register,
        >,
    ) {
    }
    fn read_cptra_dbg_manuf_service_reg(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_dbg_manuf_service_reg(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_clk_gating_en(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraClkGatingEn::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_clk_gating_en(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraClkGatingEn::Register,
        >,
    ) {
    }
    fn read_cptra_generic_input_wires(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn read_cptra_generic_output_wires(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_generic_output_wires(
        &mut self,
        _val: caliptra_emu_types::RvData,
        _index: usize,
    ) {
    }
    fn read_cptra_hw_rev_id(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraHwRevId::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_cptra_fw_rev_id(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_fw_rev_id(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_cptra_hw_config(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraHwConfig::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_cptra_wdt_timer1_en(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraWdtTimer1En::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_timer1_en(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraWdtTimer1En::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_timer1_ctrl(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraWdtTimer1Ctrl::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_timer1_ctrl(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraWdtTimer1Ctrl::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_timer1_timeout_period(
        &mut self,
        _index: usize,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_wdt_timer1_timeout_period(
        &mut self,
        _val: caliptra_emu_types::RvData,
        _index: usize,
    ) {
    }
    fn read_cptra_wdt_timer2_en(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraWdtTimer2En::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_timer2_en(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraWdtTimer2En::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_timer2_ctrl(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraWdtTimer2Ctrl::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_timer2_ctrl(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraWdtTimer2Ctrl::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_timer2_timeout_period(
        &mut self,
        _index: usize,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_wdt_timer2_timeout_period(
        &mut self,
        _val: caliptra_emu_types::RvData,
        _index: usize,
    ) {
    }
    fn read_cptra_wdt_status(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraWdtStatus::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_wdt_status(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraWdtStatus::Register,
        >,
    ) {
    }
    fn read_cptra_fuse_valid_axi_user(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_fuse_valid_axi_user(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_fuse_axi_user_lock(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraXxxxAxiUserLock::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_fuse_axi_user_lock(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraXxxxAxiUserLock::Register,
        >,
    ) {
    }
    fn read_cptra_wdt_cfg(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_wdt_cfg(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_cptra_i_trng_entropy_config_0(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraItrngEntropyConfig0::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_i_trng_entropy_config_0(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraItrngEntropyConfig0::Register,
        >,
    ) {
    }
    fn read_cptra_i_trng_entropy_config_1(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraItrngEntropyConfig1::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_i_trng_entropy_config_1(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraItrngEntropyConfig1::Register,
        >,
    ) {
    }
    fn read_cptra_rsvd_reg(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_rsvd_reg(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_cptra_hw_capabilities(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_hw_capabilities(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_fw_capabilities(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_fw_capabilities(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_cptra_cap_lock(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraXxxxxxxk::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_cap_lock(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraXxxxxxxk::Register,
        >,
    ) {
    }
    fn read_cptra_owner_pk_hash(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_cptra_owner_pk_hash(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_cptra_owner_pk_hash_lock(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::CptraXxxxxxxk::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_cptra_owner_pk_hash_lock(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::CptraXxxxxxxk::Register,
        >,
    ) {
    }
    fn write_fuse_uds_seed(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn write_fuse_field_entropy(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_fuse_vendor_pk_hash(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fuse_vendor_pk_hash(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_fuse_ecc_revocation(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::FuseEccRevocation::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_ecc_revocation(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::FuseEccRevocation::Register,
        >,
    ) {
    }
    fn read_fuse_fmc_key_manifest_svn(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fuse_fmc_key_manifest_svn(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_fuse_runtime_svn(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fuse_runtime_svn(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_fuse_anti_rollback_disable(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::FuseAntiRollbackDisable::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_anti_rollback_disable(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::FuseAntiRollbackDisable::Register,
        >,
    ) {
    }
    fn read_fuse_idevid_cert_attr(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fuse_idevid_cert_attr(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_fuse_idevid_manuf_hsm_id(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fuse_idevid_manuf_hsm_id(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_fuse_lms_revocation(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fuse_lms_revocation(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_fuse_mldsa_revocation(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::FuseMldsaRevocation::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_mldsa_revocation(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::FuseMldsaRevocation::Register,
        >,
    ) {
    }
    fn read_fuse_soc_stepping_id(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::FuseSocSteppingId::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_soc_stepping_id(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::FuseSocSteppingId::Register,
        >,
    ) {
    }
    fn read_fuse_manuf_dbg_unlock_token(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fuse_manuf_dbg_unlock_token(
        &mut self,
        _val: caliptra_emu_types::RvData,
        _index: usize,
    ) {
    }
    fn read_fuse_pqc_key_type(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::FusePqcKeyType::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_pqc_key_type(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::FusePqcKeyType::Register,
        >,
    ) {
    }
    fn read_fuse_soc_manifest_svn(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_fuse_soc_manifest_svn(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_fuse_soc_manifest_max_svn(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::FuseSocManifestMaxSvn::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_fuse_soc_manifest_max_svn(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::FuseSocManifestMaxSvn::Register,
        >,
    ) {
    }
    fn read_ss_caliptra_base_addr_l(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_caliptra_base_addr_l(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_caliptra_base_addr_h(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_caliptra_base_addr_h(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_mci_base_addr_l(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_mci_base_addr_l(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_mci_base_addr_h(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_mci_base_addr_h(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_recovery_ifc_base_addr_l(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_recovery_ifc_base_addr_l(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_recovery_ifc_base_addr_h(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_recovery_ifc_base_addr_h(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_otp_fc_base_addr_l(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_otp_fc_base_addr_l(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_otp_fc_base_addr_h(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_otp_fc_base_addr_h(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_uds_seed_base_addr_l(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_uds_seed_base_addr_l(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_uds_seed_base_addr_h(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_uds_seed_base_addr_h(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_prod_debug_unlock_auth_pk_hash_reg_bank_offset(
        &mut self,
    ) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_prod_debug_unlock_auth_pk_hash_reg_bank_offset(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_ss_num_of_prod_debug_unlock_auth_pk_hashes(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_num_of_prod_debug_unlock_auth_pk_hashes(
        &mut self,
        _val: caliptra_emu_types::RvData,
    ) {
    }
    fn read_ss_debug_intent(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::SsDebugIntent::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn read_ss_caliptra_dma_axi_user(&mut self) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_caliptra_dma_axi_user(&mut self, _val: caliptra_emu_types::RvData) {}
    fn read_ss_strap_generic(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_strap_generic(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_ss_dbg_manuf_service_reg_req(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::SsDbgManufServiceRegReq::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_ss_dbg_manuf_service_reg_req(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::SsDbgManufServiceRegReq::Register,
        >,
    ) {
    }
    fn read_ss_dbg_manuf_service_reg_rsp(
        &mut self,
    ) -> caliptra_emu_bus::ReadWriteRegister<
        u32,
        registers_generated::soc::bits::SsDbgManufServiceRegRsp::Register,
    > {
        caliptra_emu_bus::ReadWriteRegister::new(0)
    }
    fn write_ss_dbg_manuf_service_reg_rsp(
        &mut self,
        _val: caliptra_emu_bus::ReadWriteRegister<
            u32,
            registers_generated::soc::bits::SsDbgManufServiceRegRsp::Register,
        >,
    ) {
    }
    fn read_ss_soc_dbg_unlock_level(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_soc_dbg_unlock_level(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
    fn read_ss_generic_fw_exec_ctrl(&mut self, _index: usize) -> caliptra_emu_types::RvData {
        0
    }
    fn write_ss_generic_fw_exec_ctrl(&mut self, _val: caliptra_emu_types::RvData, _index: usize) {}
}
pub struct SocBus {
    pub periph: Box<dyn SocPeripheral>,
}
impl caliptra_emu_bus::Bus for SocBus {
    fn read(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
    ) -> Result<caliptra_emu_types::RvData, caliptra_emu_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(caliptra_emu_bus::BusError::LoadAddrMisaligned);
        }
        match addr {
            0..4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_hw_error_fatal().reg.get(),
            )),
            4..8 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_hw_error_non_fatal().reg.get(),
            )),
            8..0xc => Ok(self.periph.read_cptra_fw_error_fatal()),
            0xc..0x10 => Ok(self.periph.read_cptra_fw_error_non_fatal()),
            0x10..0x14 => Ok(self.periph.read_cptra_hw_error_enc()),
            0x14..0x18 => Ok(self.periph.read_cptra_fw_error_enc()),
            0x18..0x38 => Ok(self
                .periph
                .read_cptra_fw_extended_error_info((addr as usize - 0x18) / 4)),
            0x38..0x3c => Ok(self.periph.read_cptra_boot_status()),
            0x3c..0x40 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_flow_status().reg.get(),
            )),
            0x40..0x44 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_reset_reason().reg.get(),
            )),
            0x44..0x48 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_security_state().reg.get(),
            )),
            0x48..0x5c => Ok(self
                .periph
                .read_cptra_mbox_valid_axi_user((addr as usize - 0x48) / 4)),
            0x5c..0x70 => Ok(caliptra_emu_types::RvData::from(
                self.periph
                    .read_cptra_mbox_axi_user_lock((addr as usize - 0x5c) / 4)
                    .reg
                    .get(),
            )),
            0x70..0x74 => Ok(self.periph.read_cptra_trng_valid_axi_user()),
            0x74..0x78 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_trng_axi_user_lock().reg.get(),
            )),
            0x78..0xa8 => Ok(self.periph.read_cptra_trng_data((addr as usize - 0x78) / 4)),
            0xa8..0xac => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_trng_ctrl().reg.get(),
            )),
            0xac..0xb0 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_trng_status().reg.get(),
            )),
            0xb0..0xb4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_fuse_wr_done().reg.get(),
            )),
            0xb4..0xb8 => Ok(self.periph.read_cptra_timer_config()),
            0xb8..0xbc => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_bootfsm_go().reg.get(),
            )),
            0xbc..0xc0 => Ok(self.periph.read_cptra_dbg_manuf_service_reg()),
            0xc0..0xc4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_clk_gating_en().reg.get(),
            )),
            0xc4..0xcc => Ok(self
                .periph
                .read_cptra_generic_input_wires((addr as usize - 0xc4) / 4)),
            0xcc..0xd4 => Ok(self
                .periph
                .read_cptra_generic_output_wires((addr as usize - 0xcc) / 4)),
            0xd4..0xd8 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_hw_rev_id().reg.get(),
            )),
            0xd8..0xe0 => Ok(self.periph.read_cptra_fw_rev_id((addr as usize - 0xd8) / 4)),
            0xe0..0xe4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_hw_config().reg.get(),
            )),
            0xe4..0xe8 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_wdt_timer1_en().reg.get(),
            )),
            0xe8..0xec => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_wdt_timer1_ctrl().reg.get(),
            )),
            0xec..0xf4 => Ok(self
                .periph
                .read_cptra_wdt_timer1_timeout_period((addr as usize - 0xec) / 4)),
            0xf4..0xf8 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_wdt_timer2_en().reg.get(),
            )),
            0xf8..0xfc => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_wdt_timer2_ctrl().reg.get(),
            )),
            0xfc..0x104 => Ok(self
                .periph
                .read_cptra_wdt_timer2_timeout_period((addr as usize - 0xfc) / 4)),
            0x104..0x108 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_wdt_status().reg.get(),
            )),
            0x108..0x10c => Ok(self.periph.read_cptra_fuse_valid_axi_user()),
            0x10c..0x110 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_fuse_axi_user_lock().reg.get(),
            )),
            0x110..0x118 => Ok(self.periph.read_cptra_wdt_cfg((addr as usize - 0x110) / 4)),
            0x118..0x11c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_i_trng_entropy_config_0().reg.get(),
            )),
            0x11c..0x120 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_i_trng_entropy_config_1().reg.get(),
            )),
            0x120..0x128 => Ok(self.periph.read_cptra_rsvd_reg((addr as usize - 0x120) / 4)),
            0x128..0x12c => Ok(self.periph.read_cptra_hw_capabilities()),
            0x12c..0x130 => Ok(self.periph.read_cptra_fw_capabilities()),
            0x130..0x134 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_cap_lock().reg.get(),
            )),
            0x140..0x170 => Ok(self
                .periph
                .read_cptra_owner_pk_hash((addr as usize - 0x140) / 4)),
            0x170..0x174 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_cptra_owner_pk_hash_lock().reg.get(),
            )),
            0x260..0x290 => Ok(self
                .periph
                .read_fuse_vendor_pk_hash((addr as usize - 0x260) / 4)),
            0x290..0x294 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_fuse_ecc_revocation().reg.get(),
            )),
            0x2b4..0x2b8 => Ok(self.periph.read_fuse_fmc_key_manifest_svn()),
            0x2b8..0x2c8 => Ok(self
                .periph
                .read_fuse_runtime_svn((addr as usize - 0x2b8) / 4)),
            0x2c8..0x2cc => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_fuse_anti_rollback_disable().reg.get(),
            )),
            0x2cc..0x32c => Ok(self
                .periph
                .read_fuse_idevid_cert_attr((addr as usize - 0x2cc) / 4)),
            0x32c..0x33c => Ok(self
                .periph
                .read_fuse_idevid_manuf_hsm_id((addr as usize - 0x32c) / 4)),
            0x340..0x344 => Ok(self.periph.read_fuse_lms_revocation()),
            0x344..0x348 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_fuse_mldsa_revocation().reg.get(),
            )),
            0x348..0x34c => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_fuse_soc_stepping_id().reg.get(),
            )),
            0x34c..0x38c => Ok(self
                .periph
                .read_fuse_manuf_dbg_unlock_token((addr as usize - 0x34c) / 4)),
            0x38c..0x390 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_fuse_pqc_key_type().reg.get(),
            )),
            0x390..0x3a0 => Ok(self
                .periph
                .read_fuse_soc_manifest_svn((addr as usize - 0x390) / 4)),
            0x3a0..0x3a4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_fuse_soc_manifest_max_svn().reg.get(),
            )),
            0x500..0x504 => Ok(self.periph.read_ss_caliptra_base_addr_l()),
            0x504..0x508 => Ok(self.periph.read_ss_caliptra_base_addr_h()),
            0x508..0x50c => Ok(self.periph.read_ss_mci_base_addr_l()),
            0x50c..0x510 => Ok(self.periph.read_ss_mci_base_addr_h()),
            0x510..0x514 => Ok(self.periph.read_ss_recovery_ifc_base_addr_l()),
            0x514..0x518 => Ok(self.periph.read_ss_recovery_ifc_base_addr_h()),
            0x518..0x51c => Ok(self.periph.read_ss_otp_fc_base_addr_l()),
            0x51c..0x520 => Ok(self.periph.read_ss_otp_fc_base_addr_h()),
            0x520..0x524 => Ok(self.periph.read_ss_uds_seed_base_addr_l()),
            0x524..0x528 => Ok(self.periph.read_ss_uds_seed_base_addr_h()),
            0x528..0x52c => Ok(self
                .periph
                .read_ss_prod_debug_unlock_auth_pk_hash_reg_bank_offset()),
            0x52c..0x530 => Ok(self
                .periph
                .read_ss_num_of_prod_debug_unlock_auth_pk_hashes()),
            0x530..0x534 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_ss_debug_intent().reg.get(),
            )),
            0x534..0x538 => Ok(self.periph.read_ss_caliptra_dma_axi_user()),
            0x5a0..0x5b0 => Ok(self
                .periph
                .read_ss_strap_generic((addr as usize - 0x5a0) / 4)),
            0x5c0..0x5c4 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_ss_dbg_manuf_service_reg_req().reg.get(),
            )),
            0x5c4..0x5c8 => Ok(caliptra_emu_types::RvData::from(
                self.periph.read_ss_dbg_manuf_service_reg_rsp().reg.get(),
            )),
            0x5c8..0x5d0 => Ok(self
                .periph
                .read_ss_soc_dbg_unlock_level((addr as usize - 0x5c8) / 4)),
            0x5d0..0x5e0 => Ok(self
                .periph
                .read_ss_generic_fw_exec_ctrl((addr as usize - 0x5d0) / 4)),
            _ => Err(caliptra_emu_bus::BusError::LoadAccessFault),
        }
    }
    fn write(
        &mut self,
        size: caliptra_emu_types::RvSize,
        addr: caliptra_emu_types::RvAddr,
        val: caliptra_emu_types::RvData,
    ) -> Result<(), caliptra_emu_bus::BusError> {
        if addr & 0x3 != 0 || size != caliptra_emu_types::RvSize::Word {
            return Err(caliptra_emu_bus::BusError::StoreAddrMisaligned);
        }
        match addr {
            0..4 => {
                self.periph
                    .write_cptra_hw_error_fatal(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            4..8 => {
                self.periph
                    .write_cptra_hw_error_non_fatal(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            8..0xc => {
                self.periph.write_cptra_fw_error_fatal(val);
                Ok(())
            }
            0xc..0x10 => {
                self.periph.write_cptra_fw_error_non_fatal(val);
                Ok(())
            }
            0x10..0x14 => {
                self.periph.write_cptra_hw_error_enc(val);
                Ok(())
            }
            0x14..0x18 => {
                self.periph.write_cptra_fw_error_enc(val);
                Ok(())
            }
            0x18..0x38 => {
                self.periph
                    .write_cptra_fw_extended_error_info(val, (addr as usize - 0x18) / 4);
                Ok(())
            }
            0x38..0x3c => {
                self.periph.write_cptra_boot_status(val);
                Ok(())
            }
            0x3c..0x40 => {
                self.periph
                    .write_cptra_flow_status(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x48..0x5c => {
                self.periph
                    .write_cptra_mbox_valid_axi_user(val, (addr as usize - 0x48) / 4);
                Ok(())
            }
            0x5c..0x70 => {
                self.periph.write_cptra_mbox_axi_user_lock(
                    caliptra_emu_bus::ReadWriteRegister::new(val),
                    (addr as usize - 0x5c) / 4,
                );
                Ok(())
            }
            0x70..0x74 => {
                self.periph.write_cptra_trng_valid_axi_user(val);
                Ok(())
            }
            0x74..0x78 => {
                self.periph
                    .write_cptra_trng_axi_user_lock(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x78..0xa8 => {
                self.periph
                    .write_cptra_trng_data(val, (addr as usize - 0x78) / 4);
                Ok(())
            }
            0xa8..0xac => {
                self.periph
                    .write_cptra_trng_ctrl(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xac..0xb0 => {
                self.periph
                    .write_cptra_trng_status(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xb0..0xb4 => {
                self.periph
                    .write_cptra_fuse_wr_done(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xb4..0xb8 => {
                self.periph.write_cptra_timer_config(val);
                Ok(())
            }
            0xb8..0xbc => {
                self.periph
                    .write_cptra_bootfsm_go(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xbc..0xc0 => {
                self.periph.write_cptra_dbg_manuf_service_reg(val);
                Ok(())
            }
            0xc0..0xc4 => {
                self.periph
                    .write_cptra_clk_gating_en(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xcc..0xd4 => {
                self.periph
                    .write_cptra_generic_output_wires(val, (addr as usize - 0xcc) / 4);
                Ok(())
            }
            0xd8..0xe0 => {
                self.periph
                    .write_cptra_fw_rev_id(val, (addr as usize - 0xd8) / 4);
                Ok(())
            }
            0xe4..0xe8 => {
                self.periph
                    .write_cptra_wdt_timer1_en(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xe8..0xec => {
                self.periph
                    .write_cptra_wdt_timer1_ctrl(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xec..0xf4 => {
                self.periph
                    .write_cptra_wdt_timer1_timeout_period(val, (addr as usize - 0xec) / 4);
                Ok(())
            }
            0xf4..0xf8 => {
                self.periph
                    .write_cptra_wdt_timer2_en(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xf8..0xfc => {
                self.periph
                    .write_cptra_wdt_timer2_ctrl(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0xfc..0x104 => {
                self.periph
                    .write_cptra_wdt_timer2_timeout_period(val, (addr as usize - 0xfc) / 4);
                Ok(())
            }
            0x104..0x108 => {
                self.periph
                    .write_cptra_wdt_status(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x108..0x10c => {
                self.periph.write_cptra_fuse_valid_axi_user(val);
                Ok(())
            }
            0x10c..0x110 => {
                self.periph
                    .write_cptra_fuse_axi_user_lock(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x110..0x118 => {
                self.periph
                    .write_cptra_wdt_cfg(val, (addr as usize - 0x110) / 4);
                Ok(())
            }
            0x118..0x11c => {
                self.periph.write_cptra_i_trng_entropy_config_0(
                    caliptra_emu_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x11c..0x120 => {
                self.periph.write_cptra_i_trng_entropy_config_1(
                    caliptra_emu_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x120..0x128 => {
                self.periph
                    .write_cptra_rsvd_reg(val, (addr as usize - 0x120) / 4);
                Ok(())
            }
            0x128..0x12c => {
                self.periph.write_cptra_hw_capabilities(val);
                Ok(())
            }
            0x12c..0x130 => {
                self.periph.write_cptra_fw_capabilities(val);
                Ok(())
            }
            0x130..0x134 => {
                self.periph
                    .write_cptra_cap_lock(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x140..0x170 => {
                self.periph
                    .write_cptra_owner_pk_hash(val, (addr as usize - 0x140) / 4);
                Ok(())
            }
            0x170..0x174 => {
                self.periph
                    .write_cptra_owner_pk_hash_lock(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x200..0x240 => {
                self.periph
                    .write_fuse_uds_seed(val, (addr as usize - 0x200) / 4);
                Ok(())
            }
            0x240..0x260 => {
                self.periph
                    .write_fuse_field_entropy(val, (addr as usize - 0x240) / 4);
                Ok(())
            }
            0x260..0x290 => {
                self.periph
                    .write_fuse_vendor_pk_hash(val, (addr as usize - 0x260) / 4);
                Ok(())
            }
            0x290..0x294 => {
                self.periph
                    .write_fuse_ecc_revocation(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x2b4..0x2b8 => {
                self.periph.write_fuse_fmc_key_manifest_svn(val);
                Ok(())
            }
            0x2b8..0x2c8 => {
                self.periph
                    .write_fuse_runtime_svn(val, (addr as usize - 0x2b8) / 4);
                Ok(())
            }
            0x2c8..0x2cc => {
                self.periph.write_fuse_anti_rollback_disable(
                    caliptra_emu_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x2cc..0x32c => {
                self.periph
                    .write_fuse_idevid_cert_attr(val, (addr as usize - 0x2cc) / 4);
                Ok(())
            }
            0x32c..0x33c => {
                self.periph
                    .write_fuse_idevid_manuf_hsm_id(val, (addr as usize - 0x32c) / 4);
                Ok(())
            }
            0x340..0x344 => {
                self.periph.write_fuse_lms_revocation(val);
                Ok(())
            }
            0x344..0x348 => {
                self.periph
                    .write_fuse_mldsa_revocation(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x348..0x34c => {
                self.periph
                    .write_fuse_soc_stepping_id(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x34c..0x38c => {
                self.periph
                    .write_fuse_manuf_dbg_unlock_token(val, (addr as usize - 0x34c) / 4);
                Ok(())
            }
            0x38c..0x390 => {
                self.periph
                    .write_fuse_pqc_key_type(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x390..0x3a0 => {
                self.periph
                    .write_fuse_soc_manifest_svn(val, (addr as usize - 0x390) / 4);
                Ok(())
            }
            0x3a0..0x3a4 => {
                self.periph
                    .write_fuse_soc_manifest_max_svn(caliptra_emu_bus::ReadWriteRegister::new(val));
                Ok(())
            }
            0x500..0x504 => {
                self.periph.write_ss_caliptra_base_addr_l(val);
                Ok(())
            }
            0x504..0x508 => {
                self.periph.write_ss_caliptra_base_addr_h(val);
                Ok(())
            }
            0x508..0x50c => {
                self.periph.write_ss_mci_base_addr_l(val);
                Ok(())
            }
            0x50c..0x510 => {
                self.periph.write_ss_mci_base_addr_h(val);
                Ok(())
            }
            0x510..0x514 => {
                self.periph.write_ss_recovery_ifc_base_addr_l(val);
                Ok(())
            }
            0x514..0x518 => {
                self.periph.write_ss_recovery_ifc_base_addr_h(val);
                Ok(())
            }
            0x518..0x51c => {
                self.periph.write_ss_otp_fc_base_addr_l(val);
                Ok(())
            }
            0x51c..0x520 => {
                self.periph.write_ss_otp_fc_base_addr_h(val);
                Ok(())
            }
            0x520..0x524 => {
                self.periph.write_ss_uds_seed_base_addr_l(val);
                Ok(())
            }
            0x524..0x528 => {
                self.periph.write_ss_uds_seed_base_addr_h(val);
                Ok(())
            }
            0x528..0x52c => {
                self.periph
                    .write_ss_prod_debug_unlock_auth_pk_hash_reg_bank_offset(val);
                Ok(())
            }
            0x52c..0x530 => {
                self.periph
                    .write_ss_num_of_prod_debug_unlock_auth_pk_hashes(val);
                Ok(())
            }
            0x534..0x538 => {
                self.periph.write_ss_caliptra_dma_axi_user(val);
                Ok(())
            }
            0x5a0..0x5b0 => {
                self.periph
                    .write_ss_strap_generic(val, (addr as usize - 0x5a0) / 4);
                Ok(())
            }
            0x5c0..0x5c4 => {
                self.periph.write_ss_dbg_manuf_service_reg_req(
                    caliptra_emu_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x5c4..0x5c8 => {
                self.periph.write_ss_dbg_manuf_service_reg_rsp(
                    caliptra_emu_bus::ReadWriteRegister::new(val),
                );
                Ok(())
            }
            0x5c8..0x5d0 => {
                self.periph
                    .write_ss_soc_dbg_unlock_level(val, (addr as usize - 0x5c8) / 4);
                Ok(())
            }
            0x5d0..0x5e0 => {
                self.periph
                    .write_ss_generic_fw_exec_ctrl(val, (addr as usize - 0x5d0) / 4);
                Ok(())
            }
            _ => Err(caliptra_emu_bus::BusError::StoreAccessFault),
        }
    }
    fn poll(&mut self) {
        self.periph.poll();
    }
    fn warm_reset(&mut self) {
        self.periph.warm_reset();
    }
    fn update_reset(&mut self) {
        self.periph.update_reset();
    }
}
