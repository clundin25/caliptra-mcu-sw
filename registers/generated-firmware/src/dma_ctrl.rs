// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 4f006115433f926f4e599bc8718a39168f70ce5f
//
//
// Warning: caliptra-ss was dirty: M third_party/caliptra-rtl
// M third_party/i3c-core
//
pub const DMA_CTRL_ADDR: u32 = 0x3000_0000;
pub mod bits {
    //! Types that represent individual registers (bitfields).
    use tock_registers::register_bitfields;
    register_bitfields! {
        u32,
            pub DmaControl [
                /// Start the operation
                Start OFFSET(0) NUMBITS(1) [],
            ],
            pub DmaInterruptEnable [
                /// Enable error interrupt
                Error OFFSET(0) NUMBITS(1) [],
                /// Enable event interrupt
                Event OFFSET(1) NUMBITS(1) [],
            ],
            pub DmaInterruptState [
                /// Error-related interrupts
                Error OFFSET(0) NUMBITS(1) [],
                /// Event-related interrupts
                Event OFFSET(1) NUMBITS(1) [],
            ],
            pub DmaOpStatus [
                /// DMA operation error. Set by HW, cleared by SW .
                /// "0" = Read Error , "1" = Write Error
                Err OFFSET(1) NUMBITS(3) [],
                /// DMA operation done. Set by HW, cleared by SW
                Done OFFSET(0) NUMBITS(1) [],
            ],
    }
}
pub mod regs {
    //! Types that represent registers.
    use tock_registers::register_structs;
    register_structs! {
        pub DmaCtrl {
            (0x0 => pub dma_interrupt_state: tock_registers::registers::ReadWrite<u32, crate::dma_ctrl::bits::DmaInterruptState::Register>),
            (0x4 => pub dma_interrupt_enable: tock_registers::registers::ReadWrite<u32, crate::dma_ctrl::bits::DmaInterruptEnable::Register>),
            (0x8 => pub xfer_size: tock_registers::registers::ReadWrite<u32>),
            (0xc => pub source_addr_high: tock_registers::registers::ReadWrite<u32>),
            (0x10 => pub source_addr_lower: tock_registers::registers::ReadWrite<u32>),
            (0x14 => pub dest_addr_high: tock_registers::registers::ReadWrite<u32>),
            (0x18 => pub dest_addr_lower: tock_registers::registers::ReadWrite<u32>),
            (0x1c => pub dma_control: tock_registers::registers::ReadWrite<u32, crate::dma_ctrl::bits::DmaControl::Register>),
            (0x20 => pub dma_op_status: tock_registers::registers::ReadWrite<u32, crate::dma_ctrl::bits::DmaOpStatus::Register>),
            (0x24 => @END),
        }
    }
}
