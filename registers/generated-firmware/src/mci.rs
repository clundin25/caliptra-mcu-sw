// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 37ccfe938398b47a86a08f0f411d5b863347ba39
//
pub const MCI_REG_ADDR: u32 = 0x2100_0000;
pub mod bits {
    //! Types that represent individual registers (bitfields).
    use tock_registers::register_bitfields;
    register_bitfields! {
        u32,
            pub AggErrorFatal [
                AggErrorFatal31 OFFSET(0) NUMBITS(1) [],
                AggErrorFatal30 OFFSET(1) NUMBITS(1) [],
                AggErrorFatal29 OFFSET(2) NUMBITS(1) [],
                AggErrorFatal28 OFFSET(3) NUMBITS(1) [],
                AggErrorFatal27 OFFSET(4) NUMBITS(1) [],
                AggErrorFatal26 OFFSET(5) NUMBITS(1) [],
                AggErrorFatal25 OFFSET(6) NUMBITS(1) [],
                AggErrorFatal24 OFFSET(7) NUMBITS(1) [],
                AggErrorFatal23 OFFSET(8) NUMBITS(1) [],
                AggErrorFatal22 OFFSET(9) NUMBITS(1) [],
                AggErrorFatal21 OFFSET(10) NUMBITS(1) [],
                AggErrorFatal20 OFFSET(11) NUMBITS(1) [],
                AggErrorFatal19 OFFSET(12) NUMBITS(1) [],
                AggErrorFatal18 OFFSET(13) NUMBITS(1) [],
                AggErrorFatal17 OFFSET(14) NUMBITS(1) [],
                AggErrorFatal16 OFFSET(15) NUMBITS(1) [],
                AggErrorFatal15 OFFSET(16) NUMBITS(1) [],
                AggErrorFatal14 OFFSET(17) NUMBITS(1) [],
                AggErrorFatal13 OFFSET(18) NUMBITS(1) [],
                AggErrorFatal12 OFFSET(19) NUMBITS(1) [],
                AggErrorFatal11 OFFSET(20) NUMBITS(1) [],
                AggErrorFatal10 OFFSET(21) NUMBITS(1) [],
                AggErrorFatal9 OFFSET(22) NUMBITS(1) [],
                AggErrorFatal8 OFFSET(23) NUMBITS(1) [],
                AggErrorFatal7 OFFSET(24) NUMBITS(1) [],
                AggErrorFatal6 OFFSET(25) NUMBITS(1) [],
                AggErrorFatal5 OFFSET(26) NUMBITS(1) [],
                AggErrorFatal4 OFFSET(27) NUMBITS(1) [],
                AggErrorFatal3 OFFSET(28) NUMBITS(1) [],
                AggErrorFatal2 OFFSET(29) NUMBITS(1) [],
                AggErrorFatal1 OFFSET(30) NUMBITS(1) [],
                AggErrorFatal0 OFFSET(31) NUMBITS(1) [],
            ],
            pub AggErrorNonFatal [
                AggErrorNonFatal31 OFFSET(0) NUMBITS(1) [],
                AggErrorNonFatal30 OFFSET(1) NUMBITS(1) [],
                AggErrorNonFatal29 OFFSET(2) NUMBITS(1) [],
                AggErrorNonFatal28 OFFSET(3) NUMBITS(1) [],
                AggErrorNonFatal27 OFFSET(4) NUMBITS(1) [],
                AggErrorNonFatal26 OFFSET(5) NUMBITS(1) [],
                AggErrorNonFatal25 OFFSET(6) NUMBITS(1) [],
                AggErrorNonFatal24 OFFSET(7) NUMBITS(1) [],
                AggErrorNonFatal23 OFFSET(8) NUMBITS(1) [],
                AggErrorNonFatal22 OFFSET(9) NUMBITS(1) [],
                AggErrorNonFatal21 OFFSET(10) NUMBITS(1) [],
                AggErrorNonFatal20 OFFSET(11) NUMBITS(1) [],
                AggErrorNonFatal19 OFFSET(12) NUMBITS(1) [],
                AggErrorNonFatal18 OFFSET(13) NUMBITS(1) [],
                AggErrorNonFatal17 OFFSET(14) NUMBITS(1) [],
                AggErrorNonFatal16 OFFSET(15) NUMBITS(1) [],
                AggErrorNonFatal15 OFFSET(16) NUMBITS(1) [],
                AggErrorNonFatal14 OFFSET(17) NUMBITS(1) [],
                AggErrorNonFatal13 OFFSET(18) NUMBITS(1) [],
                AggErrorNonFatal12 OFFSET(19) NUMBITS(1) [],
                AggErrorNonFatal11 OFFSET(20) NUMBITS(1) [],
                AggErrorNonFatal10 OFFSET(21) NUMBITS(1) [],
                AggErrorNonFatal9 OFFSET(22) NUMBITS(1) [],
                AggErrorNonFatal8 OFFSET(23) NUMBITS(1) [],
                AggErrorNonFatal7 OFFSET(24) NUMBITS(1) [],
                AggErrorNonFatal6 OFFSET(25) NUMBITS(1) [],
                AggErrorNonFatal5 OFFSET(26) NUMBITS(1) [],
                AggErrorNonFatal4 OFFSET(27) NUMBITS(1) [],
                AggErrorNonFatal3 OFFSET(28) NUMBITS(1) [],
                AggErrorNonFatal2 OFFSET(29) NUMBITS(1) [],
                AggErrorNonFatal1 OFFSET(30) NUMBITS(1) [],
                AggErrorNonFatal0 OFFSET(31) NUMBITS(1) [],
            ],
            pub CapLock [
                Lock OFFSET(0) NUMBITS(1) [],
            ],
            pub Debug [
                Data OFFSET(0) NUMBITS(1) [],
            ],
            pub FwSramExecRegionSize [
                /// Size (in multiples of 4KiB)
                Size OFFSET(0) NUMBITS(16) [],
            ],
            pub HwConfig0 [
                /// MCI MBOX1 SRAM SIZE KB. If 0 there is no mailbox
                MciMbox1SramSize OFFSET(0) NUMBITS(12) [],
                /// MCI MBOX0 SRAM SIZE KB. If 0 there is no mailbox
                MciMbox0SramSize OFFSET(12) NUMBITS(12) [],
            ],
            pub HwConfig1 [
                /// Size of MCU reset counter
                MinMcuRstCounterWidth OFFSET(0) NUMBITS(5) [],
                /// MCU SRAM Size KB
                McuSramSize OFFSET(5) NUMBITS(12) [],
            ],
            pub HwErrorFatal [
                McuSramEccUnc OFFSET(0) NUMBITS(1) [],
                NmiPin OFFSET(1) NUMBITS(1) [],
                McuSramDmiAxiCollision OFFSET(2) NUMBITS(1) [],
            ],
            pub HwErrorNonFatal [
                Mbox0ProtNoLock OFFSET(0) NUMBITS(1) [],
                Mbox1ProtNoLock OFFSET(1) NUMBITS(1) [],
                Mbox0ProtOoo OFFSET(2) NUMBITS(1) [],
                Mbox1ProtOoo OFFSET(3) NUMBITS(1) [],
                Mbox0EccUnc OFFSET(4) NUMBITS(1) [],
                Mbox1EccUnc OFFSET(5) NUMBITS(1) [],
            ],
            pub HwFlowStatus [
                /// MCI Boot FSM State
                BootFsm OFFSET(0) NUMBITS(4) [],
            ],
            pub HwRevId [
                /// Official release version. Bit field encoding is:
                /// [br][lb]15:12[rb] Major version
                /// [br][lb]11: 8[rb] Minor version
                /// [br][lb] 7: 0[rb] Patch version
                McGeneration OFFSET(0) NUMBITS(16) [],
            ],
            pub MboxxAxiUserLock [
                Lock OFFSET(0) NUMBITS(1) [],
            ],
            pub ResetReason [
                /// FW update reset has been executed for the second+ time since MCI reset
                FwHitlessUpdReset OFFSET(0) NUMBITS(1) [],
                /// FW update reset has been executed first time since MCI reset
                FwBootUpdReset OFFSET(1) NUMBITS(1) [],
                /// Warm reset has been executed
                WarmReset OFFSET(2) NUMBITS(1) [],
            ],
            pub ResetRequest [
                /// Request. Writable by MCU. Causes MCU reset to be asserted by MCI. Cleared when reset is asserted.
                McuReq OFFSET(0) NUMBITS(1) [],
            ],
            pub ResetStatus [
                /// caliptra reset status. 1: Reset asserted. 0: Reset deasserted
                CptraResetSts OFFSET(0) NUMBITS(1) [],
                /// MCU reset status. 1: Reset asserted. 0: Reset deasserted
                McuResetSts OFFSET(1) NUMBITS(1) [],
            ],
            pub SecurityState [
                /// Device Lifecycle
                DeviceLifecycle OFFSET(0) NUMBITS(2) [
                    DeviceUnprovisioned = 0,
                    DeviceManufacturing = 1,
                    DeviceProduction = 3,
                ],
                /// Debug Locked
                DebugLocked OFFSET(2) NUMBITS(1) [],
                /// scan mode signal observed at caliptra interface - only for debug mode as its used to flush assets -
                /// when truly in scan mode, everything will be BROKEN for functional reads!
                ScanMode OFFSET(3) NUMBITS(1) [],
            ],
            pub SsConfigDone [
                Done OFFSET(0) NUMBITS(1) [],
            ],
            pub SsDebugIntent [
                DebugIntent OFFSET(0) NUMBITS(1) [],
            ],
            pub WdtStatus [
                /// Timer1 timed out, timer2 enabled
                T1Timeout OFFSET(0) NUMBITS(1) [],
                /// Timer2 timed out
                T2Timeout OFFSET(1) NUMBITS(1) [],
            ],
            pub WdtTimer1Ctrl [
                /// WDT timer1 restart
                Timer1Restart OFFSET(0) NUMBITS(1) [],
            ],
            pub WdtTimer1En [
                /// WDT timer1 enable
                Timer1En OFFSET(0) NUMBITS(1) [],
            ],
            pub WdtTimer2Ctrl [
                /// WDT timer2 restart
                Timer2Restart OFFSET(0) NUMBITS(1) [],
            ],
            pub WdtTimer2En [
                /// WDT timer2 enable
                Timer2En OFFSET(0) NUMBITS(1) [],
            ],
            pub Go [
                Go OFFSET(0) NUMBITS(1) [],
            ],
            pub Error0IntrEnT [
                /// Enable bit for Collision between AXI and DMI port in MCU SRAM.
                ErrorMcuSramDmiAxiCollisionEn OFFSET(0) NUMBITS(1) [],
                /// Enable bit for Internal Errors
                ErrorInternalEn OFFSET(1) NUMBITS(1) [],
                /// Enable bit for Invalid Device in Pauser field
                ErrorMbox0InvDevEn OFFSET(2) NUMBITS(1) [],
                /// Enable bit for Invalid Device in Pauser field
                ErrorMbox1InvDevEn OFFSET(3) NUMBITS(1) [],
                /// Enable bit for Failed Commands (invalid protocol or FW Fail Status)
                ErrorMbox0CmdFailEn OFFSET(4) NUMBITS(1) [],
                /// Enable bit for Failed Commands (invalid protocol or FW Fail Status)
                ErrorMbox1CmdFailEn OFFSET(5) NUMBITS(1) [],
                /// Enable bit for Mailbox ECC Double-bit Error (uncorrectable)
                ErrorMbox0EccUncEn OFFSET(6) NUMBITS(1) [],
                /// Enable bit for Mailbox ECC Double-bit Error (uncorrectable)
                ErrorMbox1EccUncEn OFFSET(7) NUMBITS(1) [],
                /// Enable bit for WDT Timer1 timeout
                ErrorWdtTimer1TimeoutEn OFFSET(8) NUMBITS(1) [],
                /// Enable bit for WDT Timer2 timeout, applicable if timer2 is enabled as an independent timer
                ErrorWdtTimer2TimeoutEn OFFSET(9) NUMBITS(1) [],
            ],
            pub Error0IntrT [
                /// Collision between AXI and DMI port in MCU SRAM.
                ErrorMcuSramDmiAxiCollisionSts OFFSET(0) NUMBITS(1) [],
                /// Internal Errors status bit
                ErrorInternalSts OFFSET(1) NUMBITS(1) [],
                /// Invalid Device in Pauser field status bit
                ErrorMbox0InvDevSts OFFSET(2) NUMBITS(1) [],
                /// Invalid Device in Pauser field status bit
                ErrorMbox1InvDevSts OFFSET(3) NUMBITS(1) [],
                /// Failed Commands status bit (invalid protocol or FW Fail Status)
                ErrorMbox0CmdFailSts OFFSET(4) NUMBITS(1) [],
                /// Failed Commands status bit (invalid protocol or FW Fail Status)
                ErrorMbox1CmdFailSts OFFSET(5) NUMBITS(1) [],
                /// Mailbox ECC Double-bit Error (uncorrectable) status bit
                ErrorMbox0EccUncSts OFFSET(6) NUMBITS(1) [],
                /// Mailbox ECC Double-bit Error (uncorrectable) status bit
                ErrorMbox1EccUncSts OFFSET(7) NUMBITS(1) [],
                /// WDT Timer1 timeout status bit
                ErrorWdtTimer1TimeoutSts OFFSET(8) NUMBITS(1) [],
                /// WDT Timer2 timeout status bit
                ErrorWdtTimer2TimeoutSts OFFSET(9) NUMBITS(1) [],
            ],
            pub Error0IntrTrigT [
                /// Collision between AXI and DMI port in MCU SRAM trigger bit
                ErrorMcuSramDmiAxiCollisionTrig OFFSET(0) NUMBITS(1) [],
                /// Internal Errors trigger bit
                ErrorInternalTrig OFFSET(1) NUMBITS(1) [],
                /// Invalid Device in Pauser field trigger bit
                ErrorMbox0InvDevTrig OFFSET(2) NUMBITS(1) [],
                /// Invalid Device in Pauser field trigger bit
                ErrorMbox1InvDevTrig OFFSET(3) NUMBITS(1) [],
                /// Failed Commands trigger bit
                ErrorMbox0CmdFailTrig OFFSET(4) NUMBITS(1) [],
                /// Failed Commands trigger bit
                ErrorMbox1CmdFailTrig OFFSET(5) NUMBITS(1) [],
                /// Mailbox ECC Double-bit Error (uncorrectable) trigger bit
                ErrorMbox0EccUncTrig OFFSET(6) NUMBITS(1) [],
                /// Mailbox ECC Double-bit Error (uncorrectable) trigger bit
                ErrorMbox1EccUncTrig OFFSET(7) NUMBITS(1) [],
                /// WDT Timer1 timeout trigger bit
                ErrorWdtTimer1TimeoutTrig OFFSET(8) NUMBITS(1) [],
                /// WDT Timer2 timeout trigger bit
                ErrorWdtTimer2TimeoutTrig OFFSET(9) NUMBITS(1) [],
            ],
            pub Error1IntrEnT [
                /// Enable bit MCI Aggregate Error fatal bit 31
                ErrorAggErrorFatal31En OFFSET(0) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 30
                ErrorAggErrorFatal30En OFFSET(1) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 29
                ErrorAggErrorFatal29En OFFSET(2) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 28
                ErrorAggErrorFatal28En OFFSET(3) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 27
                ErrorAggErrorFatal27En OFFSET(4) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 26
                ErrorAggErrorFatal26En OFFSET(5) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 25
                ErrorAggErrorFatal25En OFFSET(6) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 24
                ErrorAggErrorFatal24En OFFSET(7) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 23
                ErrorAggErrorFatal23En OFFSET(8) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 22
                ErrorAggErrorFatal22En OFFSET(9) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 21
                ErrorAggErrorFatal21En OFFSET(10) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 20
                ErrorAggErrorFatal20En OFFSET(11) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 19
                ErrorAggErrorFatal19En OFFSET(12) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 18
                ErrorAggErrorFatal18En OFFSET(13) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 17
                ErrorAggErrorFatal17En OFFSET(14) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 16
                ErrorAggErrorFatal16En OFFSET(15) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 15
                ErrorAggErrorFatal15En OFFSET(16) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 14
                ErrorAggErrorFatal14En OFFSET(17) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 13
                ErrorAggErrorFatal13En OFFSET(18) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 12
                ErrorAggErrorFatal12En OFFSET(19) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 11
                ErrorAggErrorFatal11En OFFSET(20) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 10
                ErrorAggErrorFatal10En OFFSET(21) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 9
                ErrorAggErrorFatal9En OFFSET(22) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 8
                ErrorAggErrorFatal8En OFFSET(23) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 7
                ErrorAggErrorFatal7En OFFSET(24) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 6
                ErrorAggErrorFatal6En OFFSET(25) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 5
                ErrorAggErrorFatal5En OFFSET(26) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 4
                ErrorAggErrorFatal4En OFFSET(27) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 3
                ErrorAggErrorFatal3En OFFSET(28) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 2
                ErrorAggErrorFatal2En OFFSET(29) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 1
                ErrorAggErrorFatal1En OFFSET(30) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error fatal bit 0
                ErrorAggErrorFatal0En OFFSET(31) NUMBITS(1) [],
            ],
            pub Error1IntrT [
                /// MCI Aggregate Error fatal bit 31
                ErrorAggErrorFatal31Sts OFFSET(0) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 30
                ErrorAggErrorFatal30Sts OFFSET(1) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 29
                ErrorAggErrorFatal29Sts OFFSET(2) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 28
                ErrorAggErrorFatal28Sts OFFSET(3) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 27
                ErrorAggErrorFatal27Sts OFFSET(4) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 26
                ErrorAggErrorFatal26Sts OFFSET(5) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 25
                ErrorAggErrorFatal25Sts OFFSET(6) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 24
                ErrorAggErrorFatal24Sts OFFSET(7) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 23
                ErrorAggErrorFatal23Sts OFFSET(8) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 22
                ErrorAggErrorFatal22Sts OFFSET(9) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 21
                ErrorAggErrorFatal21Sts OFFSET(10) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 20
                ErrorAggErrorFatal20Sts OFFSET(11) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 19
                ErrorAggErrorFatal19Sts OFFSET(12) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 18
                ErrorAggErrorFatal18Sts OFFSET(13) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 17
                ErrorAggErrorFatal17Sts OFFSET(14) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 16
                ErrorAggErrorFatal16Sts OFFSET(15) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 15
                ErrorAggErrorFatal15Sts OFFSET(16) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 14
                ErrorAggErrorFatal14Sts OFFSET(17) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 13
                ErrorAggErrorFatal13Sts OFFSET(18) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 12
                ErrorAggErrorFatal12Sts OFFSET(19) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 11
                ErrorAggErrorFatal11Sts OFFSET(20) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 10
                ErrorAggErrorFatal10Sts OFFSET(21) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 9
                ErrorAggErrorFatal9Sts OFFSET(22) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 8
                ErrorAggErrorFatal8Sts OFFSET(23) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 7
                ErrorAggErrorFatal7Sts OFFSET(24) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 6
                ErrorAggErrorFatal6Sts OFFSET(25) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 5
                ErrorAggErrorFatal5Sts OFFSET(26) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 4
                ErrorAggErrorFatal4Sts OFFSET(27) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 3
                ErrorAggErrorFatal3Sts OFFSET(28) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 2
                ErrorAggErrorFatal2Sts OFFSET(29) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 1
                ErrorAggErrorFatal1Sts OFFSET(30) NUMBITS(1) [],
                /// MCI Aggregate Error fatal bit 0
                ErrorAggErrorFatal0Sts OFFSET(31) NUMBITS(1) [],
            ],
            pub Error1IntrTrigT [
                /// Trigger bit MCI Aggregate Error fatal bit 31
                ErrorAggErrorFatal31Trig OFFSET(0) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 30
                ErrorAggErrorFatal30Trig OFFSET(1) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 29
                ErrorAggErrorFatal29Trig OFFSET(2) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 28
                ErrorAggErrorFatal28Trig OFFSET(3) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 27
                ErrorAggErrorFatal27Trig OFFSET(4) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 26
                ErrorAggErrorFatal26Trig OFFSET(5) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 25
                ErrorAggErrorFatal25Trig OFFSET(6) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 24
                ErrorAggErrorFatal24Trig OFFSET(7) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 23
                ErrorAggErrorFatal23Trig OFFSET(8) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 22
                ErrorAggErrorFatal22Trig OFFSET(9) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 21
                ErrorAggErrorFatal21Trig OFFSET(10) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 20
                ErrorAggErrorFatal20Trig OFFSET(11) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 19
                ErrorAggErrorFatal19Trig OFFSET(12) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 18
                ErrorAggErrorFatal18Trig OFFSET(13) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 17
                ErrorAggErrorFatal17Trig OFFSET(14) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 16
                ErrorAggErrorFatal16Trig OFFSET(15) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 15
                ErrorAggErrorFatal15Trig OFFSET(16) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 14
                ErrorAggErrorFatal14Trig OFFSET(17) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 13
                ErrorAggErrorFatal13Trig OFFSET(18) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 12
                ErrorAggErrorFatal12Trig OFFSET(19) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 11
                ErrorAggErrorFatal11Trig OFFSET(20) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 10
                ErrorAggErrorFatal10Trig OFFSET(21) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 9
                ErrorAggErrorFatal9Trig OFFSET(22) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 8
                ErrorAggErrorFatal8Trig OFFSET(23) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 7
                ErrorAggErrorFatal7Trig OFFSET(24) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 6
                ErrorAggErrorFatal6Trig OFFSET(25) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 5
                ErrorAggErrorFatal5Trig OFFSET(26) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 4
                ErrorAggErrorFatal4Trig OFFSET(27) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 3
                ErrorAggErrorFatal3Trig OFFSET(28) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 2
                ErrorAggErrorFatal2Trig OFFSET(29) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 1
                ErrorAggErrorFatal1Trig OFFSET(30) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error fatal bit 0
                ErrorAggErrorFatal0Trig OFFSET(31) NUMBITS(1) [],
            ],
            pub GlobalIntrEnT [
                /// Global enable bit for all events of type 'Error'
                ErrorEn OFFSET(0) NUMBITS(1) [],
                /// Global enable bit for all events of type 'Notification'
                NotifEn OFFSET(1) NUMBITS(1) [],
            ],
            pub GlobalIntrT [
                /// Interrupt Event Aggregation status bit
                AggSts0 OFFSET(0) NUMBITS(1) [],
                /// Interrupt Event Aggregation status bit
                AggSts1 OFFSET(1) NUMBITS(1) [],
            ],
            pub InternalAggErrorFatalMask [
                MaskAggErrorFatal31 OFFSET(0) NUMBITS(1) [],
                MaskAggErrorFatal30 OFFSET(1) NUMBITS(1) [],
                MaskAggErrorFatal29 OFFSET(2) NUMBITS(1) [],
                MaskAggErrorFatal28 OFFSET(3) NUMBITS(1) [],
                MaskAggErrorFatal27 OFFSET(4) NUMBITS(1) [],
                MaskAggErrorFatal26 OFFSET(5) NUMBITS(1) [],
                MaskAggErrorFatal25 OFFSET(6) NUMBITS(1) [],
                MaskAggErrorFatal24 OFFSET(7) NUMBITS(1) [],
                MaskAggErrorFatal23 OFFSET(8) NUMBITS(1) [],
                MaskAggErrorFatal22 OFFSET(9) NUMBITS(1) [],
                MaskAggErrorFatal21 OFFSET(10) NUMBITS(1) [],
                MaskAggErrorFatal20 OFFSET(11) NUMBITS(1) [],
                MaskAggErrorFatal19 OFFSET(12) NUMBITS(1) [],
                MaskAggErrorFatal18 OFFSET(13) NUMBITS(1) [],
                MaskAggErrorFatal17 OFFSET(14) NUMBITS(1) [],
                MaskAggErrorFatal16 OFFSET(15) NUMBITS(1) [],
                MaskAggErrorFatal15 OFFSET(16) NUMBITS(1) [],
                MaskAggErrorFatal14 OFFSET(17) NUMBITS(1) [],
                MaskAggErrorFatal13 OFFSET(18) NUMBITS(1) [],
                MaskAggErrorFatal12 OFFSET(19) NUMBITS(1) [],
                MaskAggErrorFatal11 OFFSET(20) NUMBITS(1) [],
                MaskAggErrorFatal10 OFFSET(21) NUMBITS(1) [],
                MaskAggErrorFatal9 OFFSET(22) NUMBITS(1) [],
                MaskAggErrorFatal8 OFFSET(23) NUMBITS(1) [],
                MaskAggErrorFatal7 OFFSET(24) NUMBITS(1) [],
                MaskAggErrorFatal6 OFFSET(25) NUMBITS(1) [],
                MaskAggErrorFatal5 OFFSET(26) NUMBITS(1) [],
                MaskAggErrorFatal4 OFFSET(27) NUMBITS(1) [],
                MaskAggErrorFatal3 OFFSET(28) NUMBITS(1) [],
                MaskAggErrorFatal2 OFFSET(29) NUMBITS(1) [],
                MaskAggErrorFatal1 OFFSET(30) NUMBITS(1) [],
                MaskAggErrorFatal0 OFFSET(31) NUMBITS(1) [],
            ],
            pub InternalAggErrorNonFatalMask [
                MaskAggErrorNonFatal31 OFFSET(0) NUMBITS(1) [],
                MaskAggErrorNonFatal30 OFFSET(1) NUMBITS(1) [],
                MaskAggErrorNonFatal29 OFFSET(2) NUMBITS(1) [],
                MaskAggErrorNonFatal28 OFFSET(3) NUMBITS(1) [],
                MaskAggErrorNonFatal27 OFFSET(4) NUMBITS(1) [],
                MaskAggErrorNonFatal26 OFFSET(5) NUMBITS(1) [],
                MaskAggErrorNonFatal25 OFFSET(6) NUMBITS(1) [],
                MaskAggErrorNonFatal24 OFFSET(7) NUMBITS(1) [],
                MaskAggErrorNonFatal23 OFFSET(8) NUMBITS(1) [],
                MaskAggErrorNonFatal22 OFFSET(9) NUMBITS(1) [],
                MaskAggErrorNonFatal21 OFFSET(10) NUMBITS(1) [],
                MaskAggErrorNonFatal20 OFFSET(11) NUMBITS(1) [],
                MaskAggErrorNonFatal19 OFFSET(12) NUMBITS(1) [],
                MaskAggErrorNonFatal18 OFFSET(13) NUMBITS(1) [],
                MaskAggErrorNonFatal17 OFFSET(14) NUMBITS(1) [],
                MaskAggErrorNonFatal16 OFFSET(15) NUMBITS(1) [],
                MaskAggErrorNonFatal15 OFFSET(16) NUMBITS(1) [],
                MaskAggErrorNonFatal14 OFFSET(17) NUMBITS(1) [],
                MaskAggErrorNonFatal13 OFFSET(18) NUMBITS(1) [],
                MaskAggErrorNonFatal12 OFFSET(19) NUMBITS(1) [],
                MaskAggErrorNonFatal11 OFFSET(20) NUMBITS(1) [],
                MaskAggErrorNonFatal10 OFFSET(21) NUMBITS(1) [],
                MaskAggErrorNonFatal9 OFFSET(22) NUMBITS(1) [],
                MaskAggErrorNonFatal8 OFFSET(23) NUMBITS(1) [],
                MaskAggErrorNonFatal7 OFFSET(24) NUMBITS(1) [],
                MaskAggErrorNonFatal6 OFFSET(25) NUMBITS(1) [],
                MaskAggErrorNonFatal5 OFFSET(26) NUMBITS(1) [],
                MaskAggErrorNonFatal4 OFFSET(27) NUMBITS(1) [],
                MaskAggErrorNonFatal3 OFFSET(28) NUMBITS(1) [],
                MaskAggErrorNonFatal2 OFFSET(29) NUMBITS(1) [],
                MaskAggErrorNonFatal1 OFFSET(30) NUMBITS(1) [],
                MaskAggErrorNonFatal0 OFFSET(31) NUMBITS(1) [],
            ],
            pub InternalHwErrorFatalMask [
                MaskMcuSramEccUnc OFFSET(0) NUMBITS(1) [],
                MaskNmiPin OFFSET(1) NUMBITS(1) [],
                MaskMcuSramDmiAxiCollision OFFSET(2) NUMBITS(1) [],
            ],
            pub InternalHwErrorNonFatalMask [
                MaskMbox0ProtNoLock OFFSET(0) NUMBITS(1) [],
                MaskMbox1ProtNoLock OFFSET(1) NUMBITS(1) [],
                MaskMbox0ProtOoo OFFSET(2) NUMBITS(1) [],
                MaskMbox1ProtOoo OFFSET(3) NUMBITS(1) [],
                MaskMbox0EccUnc OFFSET(4) NUMBITS(1) [],
                MaskMbox1EccUnc OFFSET(5) NUMBITS(1) [],
            ],
            pub IntrCountIncrT [
                /// Pulse mirrors interrupt event occurrence
                Pulse OFFSET(0) NUMBITS(1) [],
            ],
            pub Notif0IntrEnT [
                /// Enable bit for MCUS SRAM ECC Single-bit Error (corretable)
                NotifMcuSramEccCorEn OFFSET(0) NUMBITS(1) [],
                /// Enable bit for Caliptra requests MCU to reset itself
                NotifCptraMcuResetReqEn OFFSET(1) NUMBITS(1) [],
                /// Enable bit for Generic Input Wires Toggle
                NotifGenInToggleEn OFFSET(2) NUMBITS(1) [],
                /// Enable bit for MBOX0 Command Available
                NotifMbox0CmdAvailEn OFFSET(3) NUMBITS(1) [],
                /// Enable bit for MBOX1 Command Available
                NotifMbox1CmdAvailEn OFFSET(4) NUMBITS(1) [],
                /// Enable bit for Caliptra MBOX Command Available
                NotifCptraMboxCmdAvailEn OFFSET(5) NUMBITS(1) [],
                /// Enable bit for Mailbox ECC Single-bit Error (correctable)
                NotifMbox0EccCorEn OFFSET(6) NUMBITS(1) [],
                /// Enable bit for Mailbox ECC Single-bit Error (correctable)
                NotifMbox1EccCorEn OFFSET(7) NUMBITS(1) [],
                /// Enable bit for Security State, Debug Locked transition
                NotifDebugLockedEn OFFSET(8) NUMBITS(1) [],
                /// Enable bit for Scan mode asserted
                NotifScanModeEn OFFSET(9) NUMBITS(1) [],
                /// Enable bit for SoC requested the mailbox while locked
                NotifMbox0SocReqLockEn OFFSET(10) NUMBITS(1) [],
                /// Enable bit for SoC requested the mailbox while locked
                NotifMbox1SocReqLockEn OFFSET(11) NUMBITS(1) [],
            ],
            pub Notif0IntrT [
                /// MCU SRAM ECC Single-bit Error (correctable) status bit
                NotifMcuSramEccCorSts OFFSET(0) NUMBITS(1) [],
                /// Caliptra requests MCU to reset itself status bit
                NotifCptraMcuResetReqSts OFFSET(1) NUMBITS(1) [],
                /// Generic Input Wires Toggle status bit
                NotifGenInToggleSts OFFSET(2) NUMBITS(1) [],
                /// MBOX0 Command Available status bit
                NotifMbox0CmdAvailSts OFFSET(3) NUMBITS(1) [],
                /// MBOX1 Command Available status bit
                NotifMbox1CmdAvailSts OFFSET(4) NUMBITS(1) [],
                /// Caliptra MBOX Command Available status bit
                NotifCptraMboxCmdAvailSts OFFSET(5) NUMBITS(1) [],
                /// Mailbox ECC Single-bit Error (correctable) status bit
                NotifMbox0EccCorSts OFFSET(6) NUMBITS(1) [],
                /// Mailbox ECC Single-bit Error (correctable) status bit
                NotifMbox1EccCorSts OFFSET(7) NUMBITS(1) [],
                /// Security State, Debug Locked transition status bit
                NotifDebugLockedSts OFFSET(8) NUMBITS(1) [],
                /// Scan mode asserted status bit
                NotifScanModeSts OFFSET(9) NUMBITS(1) [],
                /// SoC requested the mailbox while locked status bit
                NotifMbox0SocReqLockSts OFFSET(10) NUMBITS(1) [],
                /// SoC requested the mailbox while locked status bit
                NotifMbox1SocReqLockSts OFFSET(11) NUMBITS(1) [],
            ],
            pub Notif0IntrTrigT [
                /// MCU SRAM ECC Single-bit Error (correctable) trigger bit
                NotifMcuSramEccCorTrig OFFSET(0) NUMBITS(1) [],
                /// Caliptra requests MCU to reset itself trigger bit
                NotifCptraMcuResetReqTrig OFFSET(1) NUMBITS(1) [],
                /// Generic Input Wires Toggle trigger bit
                NotifGenInToggleTrig OFFSET(2) NUMBITS(1) [],
                /// MBOX0 Command Available trigger bit
                NotifMbox0CmdAvailTrig OFFSET(3) NUMBITS(1) [],
                /// MBOX1 Command Available trigger bit
                NotifMbox1CmdAvailTrig OFFSET(4) NUMBITS(1) [],
                /// Caliptra MBOX Command Available trigger bit
                NotifCptraMboxCmdAvailTrig OFFSET(5) NUMBITS(1) [],
                /// Mailbox ECC Single-bit Error (correctable) trigger bit
                NotifMbox0EccCorTrig OFFSET(6) NUMBITS(1) [],
                /// Mailbox ECC Single-bit Error (correctable) trigger bit
                NotifMbox1EccCorTrig OFFSET(7) NUMBITS(1) [],
                /// Security State, Debug Locked transition trigger bit
                NotifDebugLockedTrig OFFSET(8) NUMBITS(1) [],
                /// Scan mode asserted trigger bit
                NotifScanModeTrig OFFSET(9) NUMBITS(1) [],
                /// SoC requested the mailbox while locked trigger bit
                NotifMbox0SocReqLockTrig OFFSET(10) NUMBITS(1) [],
                /// SoC requested the mailbox while locked trigger bit
                NotifMbox1SocReqLockTrig OFFSET(11) NUMBITS(1) [],
            ],
            pub Notif1IntrEnT [
                /// Enable bit MCI Aggregate Error non fatal bit 31
                NotifAggErrorNonFatal31En OFFSET(0) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 30
                NotifAggErrorNonFatal30En OFFSET(1) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 29
                NotifAggErrorNonFatal29En OFFSET(2) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 28
                NotifAggErrorNonFatal28En OFFSET(3) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 27
                NotifAggErrorNonFatal27En OFFSET(4) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 26
                NotifAggErrorNonFatal26En OFFSET(5) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 25
                NotifAggErrorNonFatal25En OFFSET(6) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 24
                NotifAggErrorNonFatal24En OFFSET(7) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 23
                NotifAggErrorNonFatal23En OFFSET(8) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 22
                NotifAggErrorNonFatal22En OFFSET(9) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 21
                NotifAggErrorNonFatal21En OFFSET(10) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 20
                NotifAggErrorNonFatal20En OFFSET(11) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 19
                NotifAggErrorNonFatal19En OFFSET(12) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 18
                NotifAggErrorNonFatal18En OFFSET(13) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 17
                NotifAggErrorNonFatal17En OFFSET(14) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 16
                NotifAggErrorNonFatal16En OFFSET(15) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 15
                NotifAggErrorNonFatal15En OFFSET(16) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 14
                NotifAggErrorNonFatal14En OFFSET(17) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 13
                NotifAggErrorNonFatal13En OFFSET(18) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 12
                NotifAggErrorNonFatal12En OFFSET(19) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 11
                NotifAggErrorNonFatal11En OFFSET(20) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 10
                NotifAggErrorNonFatal10En OFFSET(21) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 9
                NotifAggErrorNonFatal9En OFFSET(22) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 8
                NotifAggErrorNonFatal8En OFFSET(23) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 7
                NotifAggErrorNonFatal7En OFFSET(24) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 6
                NotifAggErrorNonFatal6En OFFSET(25) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 5
                NotifAggErrorNonFatal5En OFFSET(26) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 4
                NotifAggErrorNonFatal4En OFFSET(27) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 3
                NotifAggErrorNonFatal3En OFFSET(28) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 2
                NotifAggErrorNonFatal2En OFFSET(29) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 1
                NotifAggErrorNonFatal1En OFFSET(30) NUMBITS(1) [],
                /// Enable bit MCI Aggregate Error non fatal bit 0
                NotifAggErrorNonFatal0En OFFSET(31) NUMBITS(1) [],
            ],
            pub Notif1IntrT [
                /// MCI Aggregate Error non fatal bit 31
                NotifAggErrorNonFatal31Sts OFFSET(0) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 30
                NotifAggErrorNonFatal30Sts OFFSET(1) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 29
                NotifAggErrorNonFatal29Sts OFFSET(2) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 28
                NotifAggErrorNonFatal28Sts OFFSET(3) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 27
                NotifAggErrorNonFatal27Sts OFFSET(4) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 26
                NotifAggErrorNonFatal26Sts OFFSET(5) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 25
                NotifAggErrorNonFatal25Sts OFFSET(6) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 24
                NotifAggErrorNonFatal24Sts OFFSET(7) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 23
                NotifAggErrorNonFatal23Sts OFFSET(8) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 22
                NotifAggErrorNonFatal22Sts OFFSET(9) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 21
                NotifAggErrorNonFatal21Sts OFFSET(10) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 20
                NotifAggErrorNonFatal20Sts OFFSET(11) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 19
                NotifAggErrorNonFatal19Sts OFFSET(12) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 18
                NotifAggErrorNonFatal18Sts OFFSET(13) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 17
                NotifAggErrorNonFatal17Sts OFFSET(14) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 16
                NotifAggErrorNonFatal16Sts OFFSET(15) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 15
                NotifAggErrorNonFatal15Sts OFFSET(16) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 14
                NotifAggErrorNonFatal14Sts OFFSET(17) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 13
                NotifAggErrorNonFatal13Sts OFFSET(18) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 12
                NotifAggErrorNonFatal12Sts OFFSET(19) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 11
                NotifAggErrorNonFatal11Sts OFFSET(20) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 10
                NotifAggErrorNonFatal10Sts OFFSET(21) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 9
                NotifAggErrorNonFatal9Sts OFFSET(22) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 8
                NotifAggErrorNonFatal8Sts OFFSET(23) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 7
                NotifAggErrorNonFatal7Sts OFFSET(24) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 6
                NotifAggErrorNonFatal6Sts OFFSET(25) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 5
                NotifAggErrorNonFatal5Sts OFFSET(26) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 4
                NotifAggErrorNonFatal4Sts OFFSET(27) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 3
                NotifAggErrorNonFatal3Sts OFFSET(28) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 2
                NotifAggErrorNonFatal2Sts OFFSET(29) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 1
                NotifAggErrorNonFatal1Sts OFFSET(30) NUMBITS(1) [],
                /// MCI Aggregate Error non fatal bit 0
                NotifAggErrorNonFatal0Sts OFFSET(31) NUMBITS(1) [],
            ],
            pub Notif1IntrTrigT [
                /// Trigger bit MCI Aggregate Error non fatal bit 31
                NotifAggErrorNonFatal31Trig OFFSET(0) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 30
                NotifAggErrorNonFatal30Trig OFFSET(1) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 29
                NotifAggErrorNonFatal29Trig OFFSET(2) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 28
                NotifAggErrorNonFatal28Trig OFFSET(3) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 27
                NotifAggErrorNonFatal27Trig OFFSET(4) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 26
                NotifAggErrorNonFatal26Trig OFFSET(5) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 25
                NotifAggErrorNonFatal25Trig OFFSET(6) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 24
                NotifAggErrorNonFatal24Trig OFFSET(7) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 23
                NotifAggErrorNonFatal23Trig OFFSET(8) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 22
                NotifAggErrorNonFatal22Trig OFFSET(9) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 21
                NotifAggErrorNonFatal21Trig OFFSET(10) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 20
                NotifAggErrorNonFatal20Trig OFFSET(11) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 19
                NotifAggErrorNonFatal19Trig OFFSET(12) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 18
                NotifAggErrorNonFatal18Trig OFFSET(13) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 17
                NotifAggErrorNonFatal17Trig OFFSET(14) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 16
                NotifAggErrorNonFatal16Trig OFFSET(15) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 15
                NotifAggErrorNonFatal15Trig OFFSET(16) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 14
                NotifAggErrorNonFatal14Trig OFFSET(17) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 13
                NotifAggErrorNonFatal13Trig OFFSET(18) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 12
                NotifAggErrorNonFatal12Trig OFFSET(19) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 11
                NotifAggErrorNonFatal11Trig OFFSET(20) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 10
                NotifAggErrorNonFatal10Trig OFFSET(21) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 9
                NotifAggErrorNonFatal9Trig OFFSET(22) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 8
                NotifAggErrorNonFatal8Trig OFFSET(23) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 7
                NotifAggErrorNonFatal7Trig OFFSET(24) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 6
                NotifAggErrorNonFatal6Trig OFFSET(25) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 5
                NotifAggErrorNonFatal5Trig OFFSET(26) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 4
                NotifAggErrorNonFatal4Trig OFFSET(27) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 3
                NotifAggErrorNonFatal3Trig OFFSET(28) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 2
                NotifAggErrorNonFatal2Trig OFFSET(29) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 1
                NotifAggErrorNonFatal1Trig OFFSET(30) NUMBITS(1) [],
                /// Trigger bit MCI Aggregate Error non fatal bit 0
                NotifAggErrorNonFatal0Trig OFFSET(31) NUMBITS(1) [],
            ],
    }
}
pub mod regs {
    //! Types that represent registers.
    use tock_registers::register_structs;
    register_structs! {
        pub Mci {
            (0x0 => pub hw_capabilities: tock_registers::registers::ReadWrite<u32>),
            (0x4 => pub fw_capabilities: tock_registers::registers::ReadWrite<u32>),
            (0x8 => pub cap_lock: tock_registers::registers::ReadWrite<u32, crate::mci::bits::CapLock::Register>),
            (0xc => pub hw_rev_id: tock_registers::registers::ReadOnly<u32, crate::mci::bits::HwRevId::Register>),
            (0x10 => pub fw_rev_id: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x18 => pub hw_config0: tock_registers::registers::ReadOnly<u32, crate::mci::bits::HwConfig0::Register>),
            (0x1c => pub hw_config1: tock_registers::registers::ReadOnly<u32, crate::mci::bits::HwConfig1::Register>),
            (0x20 => pub fw_flow_status: tock_registers::registers::ReadWrite<u32>),
            (0x24 => pub hw_flow_status: tock_registers::registers::ReadOnly<u32, crate::mci::bits::HwFlowStatus::Register>),
            (0x28 => pub reset_reason: tock_registers::registers::ReadOnly<u32, crate::mci::bits::ResetReason::Register>),
            (0x2c => pub reset_status: tock_registers::registers::ReadOnly<u32, crate::mci::bits::ResetStatus::Register>),
            (0x30 => pub security_state: tock_registers::registers::ReadOnly<u32, crate::mci::bits::SecurityState::Register>),
            (0x34 => _reserved0),
            (0x40 => pub hw_error_fatal: tock_registers::registers::ReadWrite<u32, crate::mci::bits::HwErrorFatal::Register>),
            (0x44 => pub agg_error_fatal: tock_registers::registers::ReadWrite<u32, crate::mci::bits::AggErrorFatal::Register>),
            (0x48 => pub hw_error_non_fatal: tock_registers::registers::ReadWrite<u32, crate::mci::bits::HwErrorNonFatal::Register>),
            (0x4c => pub agg_error_non_fatal: tock_registers::registers::ReadWrite<u32, crate::mci::bits::AggErrorNonFatal::Register>),
            (0x50 => pub fw_error_fatal: tock_registers::registers::ReadWrite<u32>),
            (0x54 => pub fw_error_non_fatal: tock_registers::registers::ReadWrite<u32>),
            (0x58 => pub hw_error_enc: tock_registers::registers::ReadWrite<u32>),
            (0x5c => pub fw_error_enc: tock_registers::registers::ReadWrite<u32>),
            (0x60 => pub fw_extended_error_info: [tock_registers::registers::ReadWrite<u32>; 8]),
            (0x80 => pub internal_hw_error_fatal_mask: tock_registers::registers::ReadWrite<u32, crate::mci::bits::InternalHwErrorFatalMask::Register>),
            (0x84 => pub internal_hw_error_non_fatal_mask: tock_registers::registers::ReadWrite<u32, crate::mci::bits::InternalHwErrorNonFatalMask::Register>),
            (0x88 => pub internal_agg_error_fatal_mask: tock_registers::registers::ReadWrite<u32, crate::mci::bits::InternalAggErrorFatalMask::Register>),
            (0x8c => pub internal_agg_error_non_fatal_mask: tock_registers::registers::ReadWrite<u32, crate::mci::bits::InternalAggErrorNonFatalMask::Register>),
            (0x90 => pub internal_fw_error_fatal_mask: tock_registers::registers::ReadWrite<u32>),
            (0x94 => pub internal_fw_error_non_fatal_mask: tock_registers::registers::ReadWrite<u32>),
            (0x98 => _reserved1),
            (0xa0 => pub wdt_timer1_en: tock_registers::registers::ReadWrite<u32, crate::mci::bits::WdtTimer1En::Register>),
            (0xa4 => pub wdt_timer1_ctrl: tock_registers::registers::ReadWrite<u32, crate::mci::bits::WdtTimer1Ctrl::Register>),
            (0xa8 => pub wdt_timer1_timeout_period: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0xb0 => pub wdt_timer2_en: tock_registers::registers::ReadWrite<u32, crate::mci::bits::WdtTimer2En::Register>),
            (0xb4 => pub wdt_timer2_ctrl: tock_registers::registers::ReadWrite<u32, crate::mci::bits::WdtTimer2Ctrl::Register>),
            (0xb8 => pub wdt_timer2_timeout_period: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0xc0 => pub wdt_status: tock_registers::registers::ReadOnly<u32, crate::mci::bits::WdtStatus::Register>),
            (0xc4 => _reserved2),
            (0xd0 => pub wdt_cfg: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0xd8 => _reserved3),
            (0xe0 => pub mcu_timer_config: tock_registers::registers::ReadWrite<u32>),
            (0xe4 => pub mcu_rv_mtime_l: tock_registers::registers::ReadWrite<u32>),
            (0xe8 => pub mcu_rv_mtime_h: tock_registers::registers::ReadWrite<u32>),
            (0xec => pub mcu_rv_mtimecmp_l: tock_registers::registers::ReadWrite<u32>),
            (0xf0 => pub mcu_rv_mtimecmp_h: tock_registers::registers::ReadWrite<u32>),
            (0xf4 => _reserved4),
            (0x100 => pub reset_request: tock_registers::registers::ReadWrite<u32, crate::mci::bits::ResetRequest::Register>),
            (0x104 => pub bootfsm_go: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Go::Register>),
            (0x108 => pub cptra_boot_go: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Go::Register>),
            (0x10c => pub fw_sram_exec_region_size: tock_registers::registers::ReadWrite<u32, crate::mci::bits::FwSramExecRegionSize::Register>),
            (0x110 => pub mcu_nmi_vector: tock_registers::registers::ReadWrite<u32>),
            (0x114 => pub mcu_reset_vector: tock_registers::registers::ReadWrite<u32>),
            (0x118 => _reserved5),
            (0x180 => pub mbox0_valid_axi_user: [tock_registers::registers::ReadWrite<u32>; 5]),
            (0x194 => _reserved6),
            (0x1a0 => pub mbox0_axi_user_lock: [tock_registers::registers::ReadWrite<u32, crate::mci::bits::MboxxAxiUserLock::Register>; 5]),
            (0x1b4 => _reserved7),
            (0x1c0 => pub mbox1_valid_axi_user: [tock_registers::registers::ReadWrite<u32>; 5]),
            (0x1d4 => _reserved8),
            (0x1e0 => pub mbox1_axi_user_lock: [tock_registers::registers::ReadWrite<u32, crate::mci::bits::MboxxAxiUserLock::Register>; 5]),
            (0x1f4 => _reserved9),
            (0x300 => pub soc_dft_en: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x308 => pub soc_hw_debug_en: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x310 => pub soc_prod_debug_state: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x318 => pub fc_fips_zerozation: tock_registers::registers::ReadWrite<u32>),
            (0x31c => _reserved10),
            (0x400 => pub generic_input_wires: [tock_registers::registers::ReadOnly<u32>; 2]),
            (0x408 => pub generic_output_wires: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x410 => pub debug_in: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Debug::Register>),
            (0x414 => pub debug_out: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Debug::Register>),
            (0x418 => pub ss_debug_intent: tock_registers::registers::ReadOnly<u32, crate::mci::bits::SsDebugIntent::Register>),
            (0x41c => _reserved11),
            (0x440 => pub ss_config_done_sticky: tock_registers::registers::ReadWrite<u32, crate::mci::bits::SsConfigDone::Register>),
            (0x444 => pub ss_config_done: tock_registers::registers::ReadWrite<u32, crate::mci::bits::SsConfigDone::Register>),
            (0x448 => _reserved12),
            (0x480 => pub prod_debug_unlock_pk_hash_reg: [tock_registers::registers::ReadWrite<u32>; 96]),
            (0x600 => _reserved13),
            (0x1000 => pub intr_block_rf_global_intr_en_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::GlobalIntrEnT::Register>),
            (0x1004 => pub intr_block_rf_error0_intr_en_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Error0IntrEnT::Register>),
            (0x1008 => pub intr_block_rf_error1_intr_en_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Error1IntrEnT::Register>),
            (0x100c => pub intr_block_rf_notif0_intr_en_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Notif0IntrEnT::Register>),
            (0x1010 => pub intr_block_rf_notif1_intr_en_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Notif1IntrEnT::Register>),
            (0x1014 => pub intr_block_rf_error_global_intr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::GlobalIntrT::Register>),
            (0x1018 => pub intr_block_rf_notif_global_intr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::GlobalIntrT::Register>),
            (0x101c => pub intr_block_rf_error0_internal_intr_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Error0IntrT::Register>),
            (0x1020 => pub intr_block_rf_error1_internal_intr_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Error1IntrT::Register>),
            (0x1024 => pub intr_block_rf_notif0_internal_intr_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Notif0IntrT::Register>),
            (0x1028 => pub intr_block_rf_notif1_internal_intr_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Notif1IntrT::Register>),
            (0x102c => pub intr_block_rf_error0_intr_trig_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Error0IntrTrigT::Register>),
            (0x1030 => pub intr_block_rf_error1_intr_trig_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Error1IntrTrigT::Register>),
            (0x1034 => pub intr_block_rf_notif0_intr_trig_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Notif0IntrTrigT::Register>),
            (0x1038 => pub intr_block_rf_notif1_intr_trig_r: tock_registers::registers::ReadWrite<u32, crate::mci::bits::Notif1IntrTrigT::Register>),
            (0x103c => _reserved14),
            (0x1100 => pub intr_block_rf_error_internal_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1104 => pub intr_block_rf_error_mbox0_inv_dev_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1108 => pub intr_block_rf_error_mbox1_inv_dev_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x110c => pub intr_block_rf_error_mbox0_cmd_fail_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1110 => pub intr_block_rf_error_mbox1_cmd_fail_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1114 => pub intr_block_rf_error_mbox0_ecc_unc_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1118 => pub intr_block_rf_error_mbox1_ecc_unc_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x111c => pub intr_block_rf_error_mcu_sram_dmi_axi_collision_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1120 => pub intr_block_rf_error_wdt_timer1_timeout_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1124 => pub intr_block_rf_error_wdt_timer2_timeout_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1128 => pub intr_block_rf_error_agg_error_fatal0_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x112c => pub intr_block_rf_error_agg_error_fatal1_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1130 => pub intr_block_rf_error_agg_error_fatal2_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1134 => pub intr_block_rf_error_agg_error_fatal3_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1138 => pub intr_block_rf_error_agg_error_fatal4_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x113c => pub intr_block_rf_error_agg_error_fatal5_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1140 => pub intr_block_rf_error_agg_error_fatal6_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1144 => pub intr_block_rf_error_agg_error_fatal7_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1148 => pub intr_block_rf_error_agg_error_fatal8_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x114c => pub intr_block_rf_error_agg_error_fatal9_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1150 => pub intr_block_rf_error_agg_error_fatal10_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1154 => pub intr_block_rf_error_agg_error_fatal11_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1158 => pub intr_block_rf_error_agg_error_fatal12_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x115c => pub intr_block_rf_error_agg_error_fatal13_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1160 => pub intr_block_rf_error_agg_error_fatal14_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1164 => pub intr_block_rf_error_agg_error_fatal15_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1168 => pub intr_block_rf_error_agg_error_fatal16_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x116c => pub intr_block_rf_error_agg_error_fatal17_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1170 => pub intr_block_rf_error_agg_error_fatal18_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1174 => pub intr_block_rf_error_agg_error_fatal19_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1178 => pub intr_block_rf_error_agg_error_fatal20_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x117c => pub intr_block_rf_error_agg_error_fatal21_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1180 => pub intr_block_rf_error_agg_error_fatal22_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1184 => pub intr_block_rf_error_agg_error_fatal23_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1188 => pub intr_block_rf_error_agg_error_fatal24_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x118c => pub intr_block_rf_error_agg_error_fatal25_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1190 => pub intr_block_rf_error_agg_error_fatal26_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1194 => pub intr_block_rf_error_agg_error_fatal27_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1198 => pub intr_block_rf_error_agg_error_fatal28_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x119c => pub intr_block_rf_error_agg_error_fatal29_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x11a0 => pub intr_block_rf_error_agg_error_fatal30_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x11a4 => pub intr_block_rf_error_agg_error_fatal31_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x11a8 => _reserved15),
            (0x1200 => pub intr_block_rf_notif_mcu_sram_ecc_cor_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1204 => pub intr_block_rf_notif_cptra_mcu_reset_req_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1208 => pub intr_block_rf_notif_gen_in_toggle_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x120c => pub intr_block_rf_notif_agg_error_non_fatal0_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1210 => pub intr_block_rf_notif_agg_error_non_fatal1_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1214 => pub intr_block_rf_notif_agg_error_non_fatal2_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1218 => pub intr_block_rf_notif_agg_error_non_fatal3_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x121c => pub intr_block_rf_notif_agg_error_non_fatal4_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1220 => pub intr_block_rf_notif_agg_error_non_fatal5_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1224 => pub intr_block_rf_notif_agg_error_non_fatal6_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1228 => pub intr_block_rf_notif_agg_error_non_fatal7_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x122c => pub intr_block_rf_notif_agg_error_non_fatal8_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1230 => pub intr_block_rf_notif_agg_error_non_fatal9_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1234 => pub intr_block_rf_notif_agg_error_non_fatal10_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1238 => pub intr_block_rf_notif_agg_error_non_fatal11_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x123c => pub intr_block_rf_notif_agg_error_non_fatal12_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1240 => pub intr_block_rf_notif_agg_error_non_fatal13_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1244 => pub intr_block_rf_notif_agg_error_non_fatal14_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1248 => pub intr_block_rf_notif_agg_error_non_fatal15_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x124c => pub intr_block_rf_notif_agg_error_non_fatal16_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1250 => pub intr_block_rf_notif_agg_error_non_fatal17_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1254 => pub intr_block_rf_notif_agg_error_non_fatal18_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1258 => pub intr_block_rf_notif_agg_error_non_fatal19_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x125c => pub intr_block_rf_notif_agg_error_non_fatal20_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1260 => pub intr_block_rf_notif_agg_error_non_fatal21_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1264 => pub intr_block_rf_notif_agg_error_non_fatal22_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1268 => pub intr_block_rf_notif_agg_error_non_fatal23_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x126c => pub intr_block_rf_notif_agg_error_non_fatal24_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1270 => pub intr_block_rf_notif_agg_error_non_fatal25_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1274 => pub intr_block_rf_notif_agg_error_non_fatal26_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1278 => pub intr_block_rf_notif_agg_error_non_fatal27_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x127c => pub intr_block_rf_notif_agg_error_non_fatal28_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1280 => pub intr_block_rf_notif_agg_error_non_fatal29_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1284 => pub intr_block_rf_notif_agg_error_non_fatal30_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1288 => pub intr_block_rf_notif_agg_error_non_fatal31_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x128c => pub intr_block_rf_notif_mbox0_cmd_avail_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1290 => pub intr_block_rf_notif_mbox1_cmd_avail_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1294 => pub intr_block_rf_notif_cptra_mbox_cmd_avail_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x1298 => pub intr_block_rf_notif_mbox0_ecc_cor_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x129c => pub intr_block_rf_notif_mbox1_ecc_cor_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x12a0 => pub intr_block_rf_notif_debug_locked_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x12a4 => pub intr_block_rf_notif_scan_mode_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x12a8 => pub intr_block_rf_notif_mbox0_soc_req_lock_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x12ac => pub intr_block_rf_notif_mbox1_soc_req_lock_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x12b0 => _reserved16),
            (0x1300 => pub intr_block_rf_error_internal_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1304 => pub intr_block_rf_error_mbox0_inv_dev_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1308 => pub intr_block_rf_error_mbox1_inv_dev_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x130c => pub intr_block_rf_error_mbox0_cmd_fail_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1310 => pub intr_block_rf_error_mbox1_cmd_fail_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1314 => pub intr_block_rf_error_mbox0_ecc_unc_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1318 => pub intr_block_rf_error_mbox1_ecc_unc_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x131c => pub intr_block_rf_error_wdt_timer1_timeout_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1320 => pub intr_block_rf_error_wdt_timer2_timeout_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1324 => pub intr_block_rf_error_mcu_sram_dmi_axi_collision_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1328 => pub intr_block_rf_error_agg_error_fatal0_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x132c => pub intr_block_rf_error_agg_error_fatal1_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1330 => pub intr_block_rf_error_agg_error_fatal2_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1334 => pub intr_block_rf_error_agg_error_fatal3_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1338 => pub intr_block_rf_error_agg_error_fatal4_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x133c => pub intr_block_rf_error_agg_error_fatal5_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1340 => pub intr_block_rf_error_agg_error_fatal6_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1344 => pub intr_block_rf_error_agg_error_fatal7_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1348 => pub intr_block_rf_error_agg_error_fatal8_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x134c => pub intr_block_rf_error_agg_error_fatal9_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1350 => pub intr_block_rf_error_agg_error_fatal10_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1354 => pub intr_block_rf_error_agg_error_fatal11_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1358 => pub intr_block_rf_error_agg_error_fatal12_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x135c => pub intr_block_rf_error_agg_error_fatal13_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1360 => pub intr_block_rf_error_agg_error_fatal14_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1364 => pub intr_block_rf_error_agg_error_fatal15_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1368 => pub intr_block_rf_error_agg_error_fatal16_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x136c => pub intr_block_rf_error_agg_error_fatal17_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1370 => pub intr_block_rf_error_agg_error_fatal18_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1374 => pub intr_block_rf_error_agg_error_fatal19_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1378 => pub intr_block_rf_error_agg_error_fatal20_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x137c => pub intr_block_rf_error_agg_error_fatal21_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1380 => pub intr_block_rf_error_agg_error_fatal22_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1384 => pub intr_block_rf_error_agg_error_fatal23_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1388 => pub intr_block_rf_error_agg_error_fatal24_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x138c => pub intr_block_rf_error_agg_error_fatal25_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1390 => pub intr_block_rf_error_agg_error_fatal26_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1394 => pub intr_block_rf_error_agg_error_fatal27_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1398 => pub intr_block_rf_error_agg_error_fatal28_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x139c => pub intr_block_rf_error_agg_error_fatal29_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13a0 => pub intr_block_rf_error_agg_error_fatal30_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13a4 => pub intr_block_rf_error_agg_error_fatal31_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13a8 => pub intr_block_rf_notif_mcu_sram_ecc_cor_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13ac => pub intr_block_rf_notif_cptra_mcu_reset_req_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13b0 => pub intr_block_rf_notif_gen_in_toggle_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13b4 => pub intr_block_rf_notif_agg_error_non_fatal0_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13b8 => pub intr_block_rf_notif_agg_error_non_fatal1_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13bc => pub intr_block_rf_notif_agg_error_non_fatal2_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13c0 => pub intr_block_rf_notif_agg_error_non_fatal3_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13c4 => pub intr_block_rf_notif_agg_error_non_fatal4_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13c8 => pub intr_block_rf_notif_agg_error_non_fatal5_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13cc => pub intr_block_rf_notif_agg_error_non_fatal6_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13d0 => pub intr_block_rf_notif_agg_error_non_fatal7_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13d4 => pub intr_block_rf_notif_agg_error_non_fatal8_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13d8 => pub intr_block_rf_notif_agg_error_non_fatal9_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13dc => pub intr_block_rf_notif_agg_error_non_fatal10_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13e0 => pub intr_block_rf_notif_agg_error_non_fatal11_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13e4 => pub intr_block_rf_notif_agg_error_non_fatal12_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13e8 => pub intr_block_rf_notif_agg_error_non_fatal13_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13ec => pub intr_block_rf_notif_agg_error_non_fatal14_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13f0 => pub intr_block_rf_notif_agg_error_non_fatal15_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13f4 => pub intr_block_rf_notif_agg_error_non_fatal16_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13f8 => pub intr_block_rf_notif_agg_error_non_fatal17_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x13fc => pub intr_block_rf_notif_agg_error_non_fatal18_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1400 => pub intr_block_rf_notif_agg_error_non_fatal19_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1404 => pub intr_block_rf_notif_agg_error_non_fatal20_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1408 => pub intr_block_rf_notif_agg_error_non_fatal21_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x140c => pub intr_block_rf_notif_agg_error_non_fatal22_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1410 => pub intr_block_rf_notif_agg_error_non_fatal23_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1414 => pub intr_block_rf_notif_agg_error_non_fatal24_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1418 => pub intr_block_rf_notif_agg_error_non_fatal25_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x141c => pub intr_block_rf_notif_agg_error_non_fatal26_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1420 => pub intr_block_rf_notif_agg_error_non_fatal27_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1424 => pub intr_block_rf_notif_agg_error_non_fatal28_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1428 => pub intr_block_rf_notif_agg_error_non_fatal29_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x142c => pub intr_block_rf_notif_agg_error_non_fatal30_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1430 => pub intr_block_rf_notif_agg_error_non_fatal31_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1434 => pub intr_block_rf_notif_mbox0_cmd_avail_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1438 => pub intr_block_rf_notif_mbox1_cmd_avail_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x143c => pub intr_block_rf_notif_cptra_mbox_cmd_avail_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1440 => pub intr_block_rf_notif_mbox0_ecc_cor_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1444 => pub intr_block_rf_notif_mbox1_ecc_cor_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1448 => pub intr_block_rf_notif_debug_locked_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x144c => pub intr_block_rf_notif_scan_mode_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1450 => pub intr_block_rf_notif_mbox0_soc_req_lock_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1454 => pub intr_block_rf_notif_mbox1_soc_req_lock_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::mci::bits::IntrCountIncrT::Register>),
            (0x1458 => @END),
        }
    }
}
