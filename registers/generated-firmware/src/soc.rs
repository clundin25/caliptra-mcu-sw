// Licensed under the Apache-2.0 license.
//
// generated by registers_generator with caliptra-ss repo at 37ccfe938398b47a86a08f0f411d5b863347ba39
//
pub const SOC_IFC_REG_ADDR: u32 = 0x3003_0000;
pub mod bits {
    //! Types that represent individual registers (bitfields).
    use tock_registers::register_bitfields;
    register_bitfields! {
        u32,
            pub CptraBootfsmGo [
                Go OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraClkGatingEn [
                /// Clk gating enable
                ClkGatingEn OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraFlowStatus [
                Status OFFSET(0) NUMBITS(24) [],
                /// DEV ID CSR ready
                IdevidCsrReady OFFSET(24) NUMBITS(1) [],
                /// Boot FSM State
                BootFsmPs OFFSET(25) NUMBITS(3) [],
                /// Indicates Caliptra is ready for Mailbox operations
                ReadyForMbProcessing OFFSET(28) NUMBITS(1) [],
                /// Indicates Caliptra is ready for RT flows
                ReadyForRuntime OFFSET(29) NUMBITS(1) [],
                /// Indicates Caliptra is ready for Fuses to be programmed.
                /// Read-only to both Caliptra and SOC.
                ReadyForFuses OFFSET(30) NUMBITS(1) [],
                /// Indicates Caliptra is has completed Mailbox Flow.
                MailboxFlowDone OFFSET(31) NUMBITS(1) [],
            ],
            pub CptraFuseWrDone [
                Done OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraHwConfig [
                ItrngEn OFFSET(0) NUMBITS(1) [],
                RsvdEn OFFSET(1) NUMBITS(3) [],
                LmsAccEn OFFSET(4) NUMBITS(1) [],
                SubsystemModeEn OFFSET(5) NUMBITS(1) [],
            ],
            pub CptraHwErrorFatal [
                IccmEccUnc OFFSET(0) NUMBITS(1) [],
                DccmEccUnc OFFSET(1) NUMBITS(1) [],
                NmiPin OFFSET(2) NUMBITS(1) [],
                CryptoErr OFFSET(3) NUMBITS(1) [],
                Rsvd OFFSET(4) NUMBITS(28) [],
            ],
            pub CptraHwErrorNonFatal [
                MboxProtNoLock OFFSET(0) NUMBITS(1) [],
                MboxProtOoo OFFSET(1) NUMBITS(1) [],
                MboxEccUnc OFFSET(2) NUMBITS(1) [],
                Rsvd OFFSET(3) NUMBITS(29) [],
            ],
            pub CptraHwRevId [
                /// Caliptra official release version. Bit field encoding is:
                /// [br][lb]15:8[rb] Patch version
                /// [br][lb] 7:4[rb] Minor version
                /// [br][lb] 3:0[rb] Major version
                CptraGeneration OFFSET(0) NUMBITS(16) [],
                SocSteppingId OFFSET(16) NUMBITS(16) [],
            ],
            pub CptraResetReason [
                /// FW update reset has been executed
                FwUpdReset OFFSET(0) NUMBITS(1) [],
                /// warm reset has been executed
                WarmReset OFFSET(1) NUMBITS(1) [],
            ],
            pub CptraSecurityState [
                /// Device Lifecycle
                DeviceLifecycle OFFSET(0) NUMBITS(2) [
                    DeviceUnprovisioned = 0,
                    DeviceManufacturing = 1,
                    DeviceProduction = 3,
                ],
                /// Debug Locked
                DebugLocked OFFSET(2) NUMBITS(1) [],
                /// scan mode signal observed at caliptra interface - only for debug mode as its used to flush assets -
                /// when truly in scan mode, everything will be BROKEN for functional reads!
                ScanMode OFFSET(3) NUMBITS(1) [],
                /// Reserved field
                Rsvd OFFSET(4) NUMBITS(28) [],
            ],
            pub CptraTrngCtrl [
                /// Indicates that TRNG Data can be cleared
                /// [br]Caliptra Access: RW
                /// [br]SOC Access:      RO
                Clear OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraTrngStatus [
                /// Indicates that there is a request for TRNG Data.
                /// [br]Caliptra Access: RW
                /// [br]SOC Access:      RO
                DataReq OFFSET(0) NUMBITS(1) [],
                /// Indicates that the requests TRNG Data is done and stored in the TRNG Data register.
                /// [br]Caliptra Access: RO
                /// [br]SOC Access:      RW
                /// [br]When DATA_REQ is 0 DATA_WR_DONE will also be 0
                DataWrDone OFFSET(1) NUMBITS(1) [],
            ],
            pub CptraWdtStatus [
                /// Timer1 timed out, timer2 enabled
                T1Timeout OFFSET(0) NUMBITS(1) [],
                /// Timer2 timed out
                T2Timeout OFFSET(1) NUMBITS(1) [],
            ],
            pub CptraWdtTimer1Ctrl [
                /// WDT timer1 restart
                Timer1Restart OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraWdtTimer1En [
                /// WDT timer1 enable
                Timer1En OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraWdtTimer2Ctrl [
                /// WDT timer2 restart
                Timer2Restart OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraWdtTimer2En [
                /// WDT timer2 enable
                Timer2En OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraXxxxxxxk [
                Lock OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraXxxxAxiUserLock [
                Lock OFFSET(0) NUMBITS(1) [],
            ],
            pub CptraItrngEntropyConfig0 [
                LowThreshold OFFSET(0) NUMBITS(16) [],
                HighThreshold OFFSET(16) NUMBITS(16) [],
            ],
            pub CptraItrngEntropyConfig1 [
                RepetitionCount OFFSET(0) NUMBITS(16) [],
                Rsvd OFFSET(16) NUMBITS(16) [],
            ],
            pub SsDbgManufServiceRegReq [
                /// Manufacturing debug unlock request. Only writable when lifecycle state is MANUFACTURING and DEBUG_INTENT strap is set to 1.
                ManufDbgUnlockReq OFFSET(0) NUMBITS(1) [],
                /// Production debug unlock request. Only writable when lifecycle state is PRODUCTION and DEBUG_INTENT strap is set to 1.
                ProdDbgUnlockReq OFFSET(1) NUMBITS(1) [],
                /// UDS programming request.
                UdsProgramReq OFFSET(2) NUMBITS(1) [],
                /// RSVD
                Rsvd OFFSET(3) NUMBITS(29) [],
            ],
            pub SsDbgManufServiceRegRsp [
                /// Manufacturing debug unlock was successful. Only writable by Caliptra, and only when lifecycle state is MANUFACTURING and DEBUG_INTENT strap is set to 1. Sticky once set, until warm reset.
                ManufDbgUnlockSuccess OFFSET(0) NUMBITS(1) [],
                /// Manufacturing debug unlock failed. Only writable by Caliptra, and only when lifecycle state is MANUFACTURING and DEBUG_INTENT strap is set to 1.
                ManufDbgUnlockFail OFFSET(1) NUMBITS(1) [],
                /// Manufacturing debug unlock is in progress. Only writable by Caliptra, and only when lifecycle state is MANUFACTURING and DEBUG_INTENT strap is set to 1.
                ManufDbgUnlockInProgress OFFSET(2) NUMBITS(1) [],
                /// Production debug unlock was successful. Only writable by Caliptra, and only when lifecycle state is PRODUCTION and DEBUG_INTENT strap is set to 1. Sticky once set, until warm reset.
                ProdDbgUnlockSuccess OFFSET(3) NUMBITS(1) [],
                /// Production debug unlock failed. Only writable by Caliptra, and only when lifecycle state is PRODUCTION and DEBUG_INTENT strap is set to 1.
                ProdDbgUnlockFail OFFSET(4) NUMBITS(1) [],
                /// Production debug unlock is in progress. Only writable by Caliptra, and only when lifecycle state is PRODUCTION and DEBUG_INTENT strap is set to 1.
                ProdDbgUnlockInProgress OFFSET(5) NUMBITS(1) [],
                /// UDS Programming was successful. Only writable by Caliptra. Sticky once set, until warm reset.
                UdsProgramSuccess OFFSET(6) NUMBITS(1) [],
                /// UDS Programming failed. Only writable by Caliptra.
                UdsProgramFail OFFSET(7) NUMBITS(1) [],
                /// UDS Programming is in progress. Only writable by Caliptra.
                UdsProgramInProgress OFFSET(8) NUMBITS(1) [],
                /// RSVD
                Rsvd OFFSET(9) NUMBITS(23) [],
            ],
            pub SsDebugIntent [
                DebugIntent OFFSET(0) NUMBITS(1) [],
            ],
            pub ErrorIntrEnT [
                /// Enable bit for Internal Errors
                ErrorInternalEn OFFSET(0) NUMBITS(1) [],
                /// Enable bit for Invalid Device in Pauser field
                ErrorInvDevEn OFFSET(1) NUMBITS(1) [],
                /// Enable bit for Failed Commands (invalid protocol or FW Fail Status)
                ErrorCmdFailEn OFFSET(2) NUMBITS(1) [],
                /// Enable bit for Bad Fuse received from SoC
                ErrorBadFuseEn OFFSET(3) NUMBITS(1) [],
                /// Enable bit for ICCM access blocked by lock
                ErrorIccmBlockedEn OFFSET(4) NUMBITS(1) [],
                /// Enable bit for Mailbox ECC Double-bit Error (uncorrectable)
                ErrorMboxEccUncEn OFFSET(5) NUMBITS(1) [],
                /// Enable bit for WDT Timer1 timeout
                ErrorWdtTimer1TimeoutEn OFFSET(6) NUMBITS(1) [],
                /// Enable bit for WDT Timer2 timeout, applicable if timer2 is enabled as an independent timer
                ErrorWdtTimer2TimeoutEn OFFSET(7) NUMBITS(1) [],
            ],
            pub ErrorIntrT [
                /// Internal Errors status bit
                ErrorInternalSts OFFSET(0) NUMBITS(1) [],
                /// Invalid Device in Pauser field status bit
                ErrorInvDevSts OFFSET(1) NUMBITS(1) [],
                /// Failed Commands status bit (invalid protocol or FW Fail Status)
                ErrorCmdFailSts OFFSET(2) NUMBITS(1) [],
                /// Bad Fuse received from SoC status bit
                ErrorBadFuseSts OFFSET(3) NUMBITS(1) [],
                /// ICCM access blocked by lock status bit
                ErrorIccmBlockedSts OFFSET(4) NUMBITS(1) [],
                /// Mailbox ECC Double-bit Error (uncorrectable) status bit
                ErrorMboxEccUncSts OFFSET(5) NUMBITS(1) [],
                /// WDT Timer1 timeout status bit
                ErrorWdtTimer1TimeoutSts OFFSET(6) NUMBITS(1) [],
                /// WDT Timer2 timeout status bit
                ErrorWdtTimer2TimeoutSts OFFSET(7) NUMBITS(1) [],
            ],
            pub ErrorIntrTrigT [
                /// Internal Errors trigger bit
                ErrorInternalTrig OFFSET(0) NUMBITS(1) [],
                /// Invalid Device in Pauser field trigger bit
                ErrorInvDevTrig OFFSET(1) NUMBITS(1) [],
                /// Failed Commands trigger bit
                ErrorCmdFailTrig OFFSET(2) NUMBITS(1) [],
                /// Bad Fuse received from SoC trigger bit
                ErrorBadFuseTrig OFFSET(3) NUMBITS(1) [],
                /// ICCM access blocked by lock trigger bit
                ErrorIccmBlockedTrig OFFSET(4) NUMBITS(1) [],
                /// Mailbox ECC Double-bit Error (uncorrectable) trigger bit
                ErrorMboxEccUncTrig OFFSET(5) NUMBITS(1) [],
                /// WDT Timer1 timeout trigger bit
                ErrorWdtTimer1TimeoutTrig OFFSET(6) NUMBITS(1) [],
                /// WDT Timer2 timeout trigger bit
                ErrorWdtTimer2TimeoutTrig OFFSET(7) NUMBITS(1) [],
            ],
            pub FuseAntiRollbackDisable [
                Dis OFFSET(0) NUMBITS(1) [],
            ],
            pub FuseEccRevocation [
                EccRevocation OFFSET(0) NUMBITS(4) [],
            ],
            pub FuseMldsaRevocation [
                MldsaRevocation OFFSET(0) NUMBITS(4) [],
            ],
            pub FusePqcKeyType [
                KeyType OFFSET(0) NUMBITS(2) [],
            ],
            pub FuseSocManifestMaxSvn [
                Svn OFFSET(0) NUMBITS(8) [],
            ],
            pub FuseSocSteppingId [
                SocSteppingId OFFSET(0) NUMBITS(16) [],
            ],
            pub GlobalIntrEnT [
                /// Global enable bit for all events of type 'Error'
                ErrorEn OFFSET(0) NUMBITS(1) [],
                /// Global enable bit for all events of type 'Notification'
                NotifEn OFFSET(1) NUMBITS(1) [],
            ],
            pub GlobalIntrT [
                /// Interrupt Event Aggregation status bit
                AggSts OFFSET(0) NUMBITS(1) [],
            ],
            pub InternalFwUpdateReset [
                /// FW Update reset to reset core
                CoreRst OFFSET(0) NUMBITS(1) [],
            ],
            pub InternalFwUpdateResetWaitCycles [
                /// FW Update reset wait cycles
                WaitCycles OFFSET(0) NUMBITS(8) [],
            ],
            pub InternalHwErrorFatalMask [
                MaskIccmEccUnc OFFSET(0) NUMBITS(1) [],
                MaskDccmEccUnc OFFSET(1) NUMBITS(1) [],
                MaskNmiPin OFFSET(2) NUMBITS(1) [],
                MaskCryptoErr OFFSET(3) NUMBITS(1) [],
            ],
            pub InternalHwErrorNonFatalMask [
                MaskMboxProtNoLock OFFSET(0) NUMBITS(1) [],
                MaskMboxProtOoo OFFSET(1) NUMBITS(1) [],
                MaskMboxEccUnc OFFSET(2) NUMBITS(1) [],
            ],
            pub InternalIccmLock [
                /// Lock bit gates writes to ICCM. Write 1 to set - cannot be cleared by SW.
                Lock OFFSET(0) NUMBITS(1) [],
            ],
            pub IntrCountIncrT [
                /// Pulse mirrors interrupt event occurrence
                Pulse OFFSET(0) NUMBITS(1) [],
            ],
            pub NotifIntrEnT [
                /// Enable bit for Command Available
                NotifCmdAvailEn OFFSET(0) NUMBITS(1) [],
                /// Enable bit for Mailbox ECC Single-bit Error (correctable)
                NotifMboxEccCorEn OFFSET(1) NUMBITS(1) [],
                /// Enable bit for Security State, Debug Locked transition
                NotifDebugLockedEn OFFSET(2) NUMBITS(1) [],
                /// Enable bit for Scan mode
                NotifScanModeEn OFFSET(3) NUMBITS(1) [],
                /// Enable bit for SoC requested the mailbox while locked
                NotifSocReqLockEn OFFSET(4) NUMBITS(1) [],
                /// Enable bit for Generic Input Wires Toggle
                NotifGenInToggleEn OFFSET(5) NUMBITS(1) [],
            ],
            pub NotifIntrT [
                /// Command Available status bit
                NotifCmdAvailSts OFFSET(0) NUMBITS(1) [],
                /// Mailbox ECC Single-bit Error (correctable) status bit
                NotifMboxEccCorSts OFFSET(1) NUMBITS(1) [],
                /// Security State, Debug Locked transition status bit
                NotifDebugLockedSts OFFSET(2) NUMBITS(1) [],
                /// Scan mode status bit
                NotifScanModeSts OFFSET(3) NUMBITS(1) [],
                /// SoC requested the mailbox while locked status bit
                NotifSocReqLockSts OFFSET(4) NUMBITS(1) [],
                /// Generic Input Wires Toggle status bit
                NotifGenInToggleSts OFFSET(5) NUMBITS(1) [],
            ],
            pub NotifIntrTrigT [
                /// Command Available trigger bit
                NotifCmdAvailTrig OFFSET(0) NUMBITS(1) [],
                /// Mailbox ECC Single-bit Error (correctable) trigger bit
                NotifMboxEccCorTrig OFFSET(1) NUMBITS(1) [],
                /// Security State, Debug Locked transition trigger bit
                NotifDebugLockedTrig OFFSET(2) NUMBITS(1) [],
                /// Scan mode trigger bit
                NotifScanModeTrig OFFSET(3) NUMBITS(1) [],
                /// SoC requested the mailbox while locked trigger bit
                NotifSocReqLockTrig OFFSET(4) NUMBITS(1) [],
                /// Generic Input Wires Toggle trigger bit
                NotifGenInToggleTrig OFFSET(5) NUMBITS(1) [],
            ],
    }
}
pub mod regs {
    //! Types that represent registers.
    use tock_registers::register_structs;
    register_structs! {
        pub Soc {
            (0x0 => pub cptra_hw_error_fatal: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraHwErrorFatal::Register>),
            (0x4 => pub cptra_hw_error_non_fatal: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraHwErrorNonFatal::Register>),
            (0x8 => pub cptra_fw_error_fatal: tock_registers::registers::ReadWrite<u32>),
            (0xc => pub cptra_fw_error_non_fatal: tock_registers::registers::ReadWrite<u32>),
            (0x10 => pub cptra_hw_error_enc: tock_registers::registers::ReadWrite<u32>),
            (0x14 => pub cptra_fw_error_enc: tock_registers::registers::ReadWrite<u32>),
            (0x18 => pub cptra_fw_extended_error_info: [tock_registers::registers::ReadWrite<u32>; 8]),
            (0x38 => pub cptra_boot_status: tock_registers::registers::ReadWrite<u32>),
            (0x3c => pub cptra_flow_status: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraFlowStatus::Register>),
            (0x40 => pub cptra_reset_reason: tock_registers::registers::ReadOnly<u32, crate::soc::bits::CptraResetReason::Register>),
            (0x44 => pub cptra_security_state: tock_registers::registers::ReadOnly<u32, crate::soc::bits::CptraSecurityState::Register>),
            (0x48 => pub cptra_mbox_valid_axi_user: [tock_registers::registers::ReadWrite<u32>; 5]),
            (0x5c => pub cptra_mbox_axi_user_lock: [tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraXxxxAxiUserLock::Register>; 5]),
            (0x70 => pub cptra_trng_valid_axi_user: tock_registers::registers::ReadWrite<u32>),
            (0x74 => pub cptra_trng_axi_user_lock: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraXxxxAxiUserLock::Register>),
            (0x78 => pub cptra_trng_data: [tock_registers::registers::ReadWrite<u32>; 12]),
            (0xa8 => pub cptra_trng_ctrl: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraTrngCtrl::Register>),
            (0xac => pub cptra_trng_status: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraTrngStatus::Register>),
            (0xb0 => pub cptra_fuse_wr_done: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraFuseWrDone::Register>),
            (0xb4 => pub cptra_timer_config: tock_registers::registers::ReadWrite<u32>),
            (0xb8 => pub cptra_bootfsm_go: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraBootfsmGo::Register>),
            (0xbc => pub cptra_dbg_manuf_service_reg: tock_registers::registers::ReadWrite<u32>),
            (0xc0 => pub cptra_clk_gating_en: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraClkGatingEn::Register>),
            (0xc4 => pub cptra_generic_input_wires: [tock_registers::registers::ReadOnly<u32>; 2]),
            (0xcc => pub cptra_generic_output_wires: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0xd4 => pub cptra_hw_rev_id: tock_registers::registers::ReadOnly<u32, crate::soc::bits::CptraHwRevId::Register>),
            (0xd8 => pub cptra_fw_rev_id: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0xe0 => pub cptra_hw_config: tock_registers::registers::ReadOnly<u32, crate::soc::bits::CptraHwConfig::Register>),
            (0xe4 => pub cptra_wdt_timer1_en: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraWdtTimer1En::Register>),
            (0xe8 => pub cptra_wdt_timer1_ctrl: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraWdtTimer1Ctrl::Register>),
            (0xec => pub cptra_wdt_timer1_timeout_period: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0xf4 => pub cptra_wdt_timer2_en: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraWdtTimer2En::Register>),
            (0xf8 => pub cptra_wdt_timer2_ctrl: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraWdtTimer2Ctrl::Register>),
            (0xfc => pub cptra_wdt_timer2_timeout_period: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x104 => pub cptra_wdt_status: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraWdtStatus::Register>),
            (0x108 => pub cptra_fuse_valid_axi_user: tock_registers::registers::ReadWrite<u32>),
            (0x10c => pub cptra_fuse_axi_user_lock: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraXxxxAxiUserLock::Register>),
            (0x110 => pub cptra_wdt_cfg: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x118 => pub cptra_i_trng_entropy_config_0: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraItrngEntropyConfig0::Register>),
            (0x11c => pub cptra_i_trng_entropy_config_1: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraItrngEntropyConfig1::Register>),
            (0x120 => pub cptra_rsvd_reg: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x128 => pub cptra_hw_capabilities: tock_registers::registers::ReadWrite<u32>),
            (0x12c => pub cptra_fw_capabilities: tock_registers::registers::ReadWrite<u32>),
            (0x130 => pub cptra_cap_lock: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraXxxxxxxk::Register>),
            (0x134 => _reserved0),
            (0x140 => pub cptra_owner_pk_hash: [tock_registers::registers::ReadWrite<u32>; 12]),
            (0x170 => pub cptra_owner_pk_hash_lock: tock_registers::registers::ReadWrite<u32, crate::soc::bits::CptraXxxxxxxk::Register>),
            (0x174 => _reserved1),
            (0x200 => pub fuse_uds_seed: [tock_registers::registers::WriteOnly<u32>; 16]),
            (0x240 => pub fuse_field_entropy: [tock_registers::registers::WriteOnly<u32>; 8]),
            (0x260 => pub fuse_vendor_pk_hash: [tock_registers::registers::ReadWrite<u32>; 12]),
            (0x290 => pub fuse_ecc_revocation: tock_registers::registers::ReadWrite<u32, crate::soc::bits::FuseEccRevocation::Register>),
            (0x294 => _reserved2),
            (0x2b4 => pub fuse_fmc_key_manifest_svn: tock_registers::registers::ReadWrite<u32>),
            (0x2b8 => pub fuse_runtime_svn: [tock_registers::registers::ReadWrite<u32>; 4]),
            (0x2c8 => pub fuse_anti_rollback_disable: tock_registers::registers::ReadWrite<u32, crate::soc::bits::FuseAntiRollbackDisable::Register>),
            (0x2cc => pub fuse_idevid_cert_attr: [tock_registers::registers::ReadWrite<u32>; 24]),
            (0x32c => pub fuse_idevid_manuf_hsm_id: [tock_registers::registers::ReadWrite<u32>; 4]),
            (0x33c => _reserved3),
            (0x340 => pub fuse_lms_revocation: tock_registers::registers::ReadWrite<u32>),
            (0x344 => pub fuse_mldsa_revocation: tock_registers::registers::ReadWrite<u32, crate::soc::bits::FuseMldsaRevocation::Register>),
            (0x348 => pub fuse_soc_stepping_id: tock_registers::registers::ReadWrite<u32, crate::soc::bits::FuseSocSteppingId::Register>),
            (0x34c => pub fuse_manuf_dbg_unlock_token: [tock_registers::registers::ReadWrite<u32>; 4]),
            (0x35c => pub fuse_pqc_key_type: tock_registers::registers::ReadWrite<u32, crate::soc::bits::FusePqcKeyType::Register>),
            (0x360 => pub fuse_soc_manifest_svn: [tock_registers::registers::ReadWrite<u32>; 4]),
            (0x370 => pub fuse_soc_manifest_max_svn: tock_registers::registers::ReadWrite<u32, crate::soc::bits::FuseSocManifestMaxSvn::Register>),
            (0x374 => _reserved4),
            (0x500 => pub ss_caliptra_base_addr_l: tock_registers::registers::ReadWrite<u32>),
            (0x504 => pub ss_caliptra_base_addr_h: tock_registers::registers::ReadWrite<u32>),
            (0x508 => pub ss_mci_base_addr_l: tock_registers::registers::ReadWrite<u32>),
            (0x50c => pub ss_mci_base_addr_h: tock_registers::registers::ReadWrite<u32>),
            (0x510 => pub ss_recovery_ifc_base_addr_l: tock_registers::registers::ReadWrite<u32>),
            (0x514 => pub ss_recovery_ifc_base_addr_h: tock_registers::registers::ReadWrite<u32>),
            (0x518 => pub ss_otp_fc_base_addr_l: tock_registers::registers::ReadWrite<u32>),
            (0x51c => pub ss_otp_fc_base_addr_h: tock_registers::registers::ReadWrite<u32>),
            (0x520 => pub ss_uds_seed_base_addr_l: tock_registers::registers::ReadWrite<u32>),
            (0x524 => pub ss_uds_seed_base_addr_h: tock_registers::registers::ReadWrite<u32>),
            (0x528 => pub ss_prod_debug_unlock_auth_pk_hash_reg_bank_offset: tock_registers::registers::ReadWrite<u32>),
            (0x52c => pub ss_num_of_prod_debug_unlock_auth_pk_hashes: tock_registers::registers::ReadWrite<u32>),
            (0x530 => pub ss_debug_intent: tock_registers::registers::ReadOnly<u32, crate::soc::bits::SsDebugIntent::Register>),
            (0x534 => pub ss_caliptra_dma_axi_user: tock_registers::registers::ReadWrite<u32>),
            (0x538 => _reserved5),
            (0x5a0 => pub ss_strap_generic: [tock_registers::registers::ReadWrite<u32>; 4]),
            (0x5b0 => _reserved6),
            (0x5c0 => pub ss_dbg_manuf_service_reg_req: tock_registers::registers::ReadWrite<u32, crate::soc::bits::SsDbgManufServiceRegReq::Register>),
            (0x5c4 => pub ss_dbg_manuf_service_reg_rsp: tock_registers::registers::ReadWrite<u32, crate::soc::bits::SsDbgManufServiceRegRsp::Register>),
            (0x5c8 => pub ss_soc_dbg_unlock_level: [tock_registers::registers::ReadWrite<u32>; 2]),
            (0x5d0 => pub ss_generic_fw_exec_ctrl: [tock_registers::registers::ReadWrite<u32>; 4]),
            (0x5e0 => _reserved7),
            (0x600 => pub internal_obf_key: [tock_registers::registers::WriteOnly<u32>; 8]),
            (0x620 => pub internal_iccm_lock: tock_registers::registers::ReadWrite<u32, crate::soc::bits::InternalIccmLock::Register>),
            (0x624 => pub internal_fw_update_reset: tock_registers::registers::ReadWrite<u32, crate::soc::bits::InternalFwUpdateReset::Register>),
            (0x628 => pub internal_fw_update_reset_wait_cycles: tock_registers::registers::ReadWrite<u32, crate::soc::bits::InternalFwUpdateResetWaitCycles::Register>),
            (0x62c => pub internal_nmi_vector: tock_registers::registers::ReadWrite<u32>),
            (0x630 => pub internal_hw_error_fatal_mask: tock_registers::registers::ReadWrite<u32, crate::soc::bits::InternalHwErrorFatalMask::Register>),
            (0x634 => pub internal_hw_error_non_fatal_mask: tock_registers::registers::ReadWrite<u32, crate::soc::bits::InternalHwErrorNonFatalMask::Register>),
            (0x638 => pub internal_fw_error_fatal_mask: tock_registers::registers::ReadWrite<u32>),
            (0x63c => pub internal_fw_error_non_fatal_mask: tock_registers::registers::ReadWrite<u32>),
            (0x640 => pub internal_rv_mtime_l: tock_registers::registers::ReadWrite<u32>),
            (0x644 => pub internal_rv_mtime_h: tock_registers::registers::ReadWrite<u32>),
            (0x648 => pub internal_rv_mtimecmp_l: tock_registers::registers::ReadWrite<u32>),
            (0x64c => pub internal_rv_mtimecmp_h: tock_registers::registers::ReadWrite<u32>),
            (0x650 => _reserved8),
            (0x800 => pub intr_block_rf_global_intr_en_r: tock_registers::registers::ReadWrite<u32, crate::soc::bits::GlobalIntrEnT::Register>),
            (0x804 => pub intr_block_rf_error_intr_en_r: tock_registers::registers::ReadWrite<u32, crate::soc::bits::ErrorIntrEnT::Register>),
            (0x808 => pub intr_block_rf_notif_intr_en_r: tock_registers::registers::ReadWrite<u32, crate::soc::bits::NotifIntrEnT::Register>),
            (0x80c => pub intr_block_rf_error_global_intr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::GlobalIntrT::Register>),
            (0x810 => pub intr_block_rf_notif_global_intr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::GlobalIntrT::Register>),
            (0x814 => pub intr_block_rf_error_internal_intr_r: tock_registers::registers::ReadWrite<u32, crate::soc::bits::ErrorIntrT::Register>),
            (0x818 => pub intr_block_rf_notif_internal_intr_r: tock_registers::registers::ReadWrite<u32, crate::soc::bits::NotifIntrT::Register>),
            (0x81c => pub intr_block_rf_error_intr_trig_r: tock_registers::registers::ReadWrite<u32, crate::soc::bits::ErrorIntrTrigT::Register>),
            (0x820 => pub intr_block_rf_notif_intr_trig_r: tock_registers::registers::ReadWrite<u32, crate::soc::bits::NotifIntrTrigT::Register>),
            (0x824 => _reserved9),
            (0x900 => pub intr_block_rf_error_internal_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x904 => pub intr_block_rf_error_inv_dev_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x908 => pub intr_block_rf_error_cmd_fail_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x90c => pub intr_block_rf_error_bad_fuse_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x910 => pub intr_block_rf_error_iccm_blocked_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x914 => pub intr_block_rf_error_mbox_ecc_unc_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x918 => pub intr_block_rf_error_wdt_timer1_timeout_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x91c => pub intr_block_rf_error_wdt_timer2_timeout_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x920 => _reserved10),
            (0x980 => pub intr_block_rf_notif_cmd_avail_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x984 => pub intr_block_rf_notif_mbox_ecc_cor_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x988 => pub intr_block_rf_notif_debug_locked_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x98c => pub intr_block_rf_notif_scan_mode_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x990 => pub intr_block_rf_notif_soc_req_lock_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x994 => pub intr_block_rf_notif_gen_in_toggle_intr_count_r: tock_registers::registers::ReadWrite<u32>),
            (0x998 => _reserved11),
            (0xa00 => pub intr_block_rf_error_internal_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa04 => pub intr_block_rf_error_inv_dev_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa08 => pub intr_block_rf_error_cmd_fail_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa0c => pub intr_block_rf_error_bad_fuse_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa10 => pub intr_block_rf_error_iccm_blocked_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa14 => pub intr_block_rf_error_mbox_ecc_unc_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa18 => pub intr_block_rf_error_wdt_timer1_timeout_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa1c => pub intr_block_rf_error_wdt_timer2_timeout_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa20 => pub intr_block_rf_notif_cmd_avail_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa24 => pub intr_block_rf_notif_mbox_ecc_cor_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa28 => pub intr_block_rf_notif_debug_locked_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa2c => pub intr_block_rf_notif_scan_mode_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa30 => pub intr_block_rf_notif_soc_req_lock_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa34 => pub intr_block_rf_notif_gen_in_toggle_intr_count_incr_r: tock_registers::registers::ReadOnly<u32, crate::soc::bits::IntrCountIncrT::Register>),
            (0xa38 => @END),
        }
    }
}
